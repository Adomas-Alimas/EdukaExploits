"""
TODO: fic up docstring
OOP implementation of Eduka
"""
import json
import os

import requests
import xml.etree.ElementTree as ET

import exceptions


class Handler():
    def __init__(self, username: str, password: str) -> None:
        """
        Creates the intial session, set ups handler
        
        :param str username: Eduka username
        :param str password: Eduka password
        """
        self.login_data = {
            'username': username,
            'password': password
        }

        # create session, login to get auth + cookies
        self.session = requests.Session()
        self._login_session()

    def _login_session(self) -> None:
        """
        Logs in with provided login_data
        
        :raises HTTPError: if the login is unsuccessful
        """
        login_status = self.session.post("https://klase.eduka.lt/api/anonymously/login", data=self.login_data)
        
        login_status.raise_for_status()
                
    def change_login_data(self, username: str, password: str) -> None:
        self.login_data = {
            'username': username,
            'password': password
        }
        
        # recreate session, login to get auth + cookies
        self.session = requests.Session()
        self._login_session()
        
    def get_internal_answers_obscured(self, test_ID: int) -> str:
        """
        Returns json answer sheet that is used internally
        to score the quiz. The return of this function can't
        be trusted, as the answer sheet is obscured json, and the
        tasks are not provided in order. For further use this
        data should be passed into `Handler.parse_internal_json`
        and sorted using `Handler.get_internal_answers_order`.
        
        :param int test_id: Test id, found in url of the current
        test: https://klase.eduka.lt/student/lesson-material/show/{test_ID}/3629303/1
        """
    
        answers_request = self.session.get(f"https://klase.eduka.lt/api/student/quiz-templates/data/{test_ID}/sprendimas")
        
        answers_request.raise_for_status()
        
        return answers_request.text
    
    def parse_internal_json()
        
        
        
            
    
            
app = Handler("AdomasAlimas", "Pameras00")

print(app.get_internal_answer_sheet(27980491))
            
            
        
    