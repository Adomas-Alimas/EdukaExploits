function saveTaskResultsAfterDeadline() {
    postFunction("mAuthorCheck", [!1])
}
function postFunction(e, t, n) {
    t = t || [],
    n = n || "mauthor-iframe";
    (!0 === inIframe() ? window.parent : document.getElementById(n).contentWindow).postMessage(JSON.stringify({
        func: e,
        parameters: t
    }), "*")
}
function reportErrorCurrentPage(e, t) {
    e = e || "mauthor-iframe";
    var n = null
      , n = !0 === inIframe() ? window.parent : document.getElementById(e).contentWindow;
    reportError(n.quizTemplates.getcurrentPageId && n.quizTemplates.getcurrentPageId(), t)
}
function getTaskCounts(e) {
    var t = !(1 < arguments.length && void 0 !== arguments[1]) || arguments[1];
    e = e || "mauthor-iframe";
    var n = null;
    if ((n = !0 === inIframe() ? window.parent : document.getElementById(e).contentWindow).quizTemplates.mAuthorCheck && n.quizTemplates.accessedPageIDs) {
        t = t ? n.quizTemplates.mAuthorCheck(!1) || {} : n.quizTemplates._results || {};
        return {
            completedTaskCount: Array.isArray(n.quizTemplates.accessedPageIDs) ? n.quizTemplates.accessedPageIDs.filter(function(e, t, n) {
                return n.indexOf(e) == t
            }).length : 0,
            totalTasksCount: (t.done_easy || 0) + (t.done_medium || 0) + (t.done_hard || 0) + (t.undone_easy || 0) + (t.undone_medium || 0) + (t.undone_hard || 0)
        }
    }
    return {}
}
function setTaskCountsBars() {
    var e = getTaskCounts(null, !1)
      , t = Math.round(e.completedTaskCount / e.totalTasksCount * 100);
    $("#points-solve-progress-bar").attr("title", t ? t + " %" : "0 %"),
    $("#points-solve-progress-bar").attr("bars-json", JSON.stringify([{
        value: e.completedTaskCount
    }])),
    $("#points-solve-progress-bar").attr("total", e.totalTasksCount)
}
function getQuizTemplatesIds(e) {
    e = e || "mauthor-iframe";
    var t = null;
    return !0 === inIframe() ? t = window.parent : document.getElementById(e) && (t = document.getElementById(e).contentWindow),
    t && t.quizTemplates && t.quizTemplates.ids || []
}
function getQuizTemplatesSelectedIds(e) {
    e = e || "mauthor-iframe";
    var t = null;
    return !0 === inIframe() ? t = window.parent : document.getElementById(e) && (t = document.getElementById(e).contentWindow),
    t && t.quizTemplates && t.quizTemplates.getSelectedTaskList() || []
}
function inIframe() {
    try {
        return window.self !== window.top
    } catch (e) {
        return !0
    }
}
function iFrameSizeChanged() {
    var n, a, e;
    1e3 < $(window).width() && (n = $(".container").width() / 1140,
    a = 100 / n + "%",
    $("iframe.mauthor-iframe").each(function() {
        var e = $(this);
        e.css({
            transform: "scale(" + n + ")",
            "transform-origin": "0 0",
            width: a
        });
        var t = e.height() * n;
        e.parent().css({
            height: t,
            overflow: "hidden"
        }),
        navigator.userAgent.match(/(iPod|iPhone|iPad)/) && (e.parent().css({
            position: "relative"
        }),
        e.css({
            position: "absolute",
            top: "0"
        }))
    }),
    e = 200 * n + "px",
    $("body").css({
        "overflow-x": "hidden",
        "margin-bottom": e,
        "min-height": "0"
    }))
}
function reloadPage() {
    location.reload()
}
$(document).ready(function() {
    function e() {
        !1 === window.iframeLoader.loaded && (window.iframeLoader.loaded = !0,
        $("#mauthor-iframe-loader").remove())
    }
    function a(e) {
        return 0 < $("#mauthor-iframe").contents().find("body").find(e).length
    }
    function t() {
        var n;
        window.iframeLoader || (window.iframeLoader = {
            loaded: !1
        }),
        n = [".ic_waitImage", ".ic_waitdlg", ".ic_player"],
        new Promise(function(t) {
            window.iframeLoader.loaded ? t(!0) : function e() {
                n.some(a) ? t(!0) : window.requestAnimationFrame(e)
            }()
        }
        ).then(e)
    }
    function n(e) {
        try {
            var t = $.parseJSON(e.data)
        } catch (e) {
            return
        }
        "function" == typeof window[t.func] && window[t.func].apply(window[t.func], t.parameters)
    }
    "in-iframe-body" !== $("body").attr("class") && $("#mauthor-iframe").length && t(),
    window.addEventListener ? window.addEventListener("message", n, !1) : window.attachEvent && window.attachEvent("onmessage", n, !1)
}),
$(window).on("load resize OrientationChange", function() {
    $("iframe.mauthor-iframe").length && $(".container").data("resize_iframe") && iFrameSizeChanged()
});
var player, start, semiResponsiveLayoutChooser, userAgent = window.navigator.userAgent, viewPort = document.querySelector("meta[name=viewport]");
function getOpener() {
    var e = null;
    return null != window.parent && null != window.parent.postMessage && (e = window.parent),
    e = null != window.opener && null != window.opener.postMessage ? window.opener : e
}
function postResizeMessage(e, n) {
    var t = getOpener();
    null != t && t.postMessage("RESIZE:" + e + ";" + n, "*")
}
function postPageLoadedMessage() {
    var e = getOpener();
    null != e && e.postMessage("PAGE_LOADED", "*")
}
function chooseLayout(e, n) {
    var t = n.orientation !== window.mAuthor.ScreenUtils.ORIENTATION_TYPES.NOT_MOBILE
      , o = n.orientation === window.mAuthor.ScreenUtils.ORIENTATION_TYPES.PORTRAIT
      , s = n.orientation === window.mAuthor.ScreenUtils.ORIENTATION_TYPES.LANDSCAPE;
    return e.chooseLayout(n.width, t, o, s)
}
function setViewPortSizesAfterScreenChanges() {
    var e = $("#_icplayer")
      , e = parseInt(e.css("width"), 10);
    viewPort.setAttribute("content", "width=" + e + ",maximum-scale=1")
}
function onResizeHandler() {
    var e = window.mAuthor.ScreenUtils.getScreenSizesDependingOnOrientation(userAgent)
      , e = chooseLayout(semiResponsiveLayoutChooser, e);
    player.changeLayout(e) && setViewPortSizesAfterScreenChanges()
}
function receiveMessage(e) {
    var n = "WINDOW_WIDTH:";
    e.data && 0 === e.data.indexOf(n) && semiResponsiveLayoutChooser && (e = JSON.parse(e.data.substring(n.length, e.data.length)),
    e = chooseLayout(semiResponsiveLayoutChooser, e),
    player.changeLayout(e))
}
function iframeResizeRequest() {
    var e, n;
    null != window.parent && null != window.parent.postMessage && (n = $("#_icplayer"),
    e = parseInt(n.css("width"), 10),
    n = parseInt(n.css("height"), 10),
    setViewPortSizesAfterScreenChanges(),
    postResizeMessage(e, n))
}
var ENV_TYPE_STUDENT_SOLUTION = 3
  , taskViewLogs = [];
function statisticsCallback(t, a, e, i, n, s, o, l) {
    void 0 !== taskViewLogs[t] ? updateTaskViewLog(taskViewLogs[t], a, e, s, o, l) : createTaskViewLog(t, a, e, o, l)
}
function createTaskViewLog(a, t, e, i, n) {
    var s = $(".tglm-tvl").data("tglm_id")
      , o = $(".tglm-tvl").data("id")
      , l = $(".tglm-tvl").data("ltp_id")
      , g = $(".tglm-tvl").data("env_type");
    void 0 === s && (s = null),
    void 0 === o && (o = null),
    void 0 === l && (l = null),
    void 0 !== g && g && (g != ENV_TYPE_STUDENT_SOLUTION ? o = n = i = null : (i = JSON.stringify(i),
    n = JSON.stringify(n)),
    g = {
        teachingGroupLessonMaterialId: s,
        studentTeachingGroupLessonMaterialId: o,
        lessonTaskPackageId: l,
        taskExternalId: a,
        interacted: e,
        viewTime: t,
        workingState: i,
        results: n,
        environmentType: g
    },
    $.ajax({
        type: "POST",
        url: Routing.generate("app_api_common_taskviewlog_logcreate"),
        dataType: "json",
        data: JSON.stringify(g),
        success: function(t) {
            (taskViewLogs = [])[a] = t.id
        }
    }))
}
function updateTaskViewLog(t, a, e, i, n, s) {
    var o = $(".tglm-tvl").data("env_type")
      , l = $(".tglm-tvl").data("id");
    void 0 === l && (l = null),
    o != ENV_TYPE_STUDENT_SOLUTION ? l = s = n = null : (n = JSON.stringify(n),
    s = JSON.stringify(s));
    s = {
        studentTeachingGroupLessonMaterialId: l,
        interacted: e,
        viewTime: a,
        workingState: n,
        results: s
    },
    t = Routing.generate("app_api_common_taskviewlog_logupdate", {
        id: t
    });
    i && navigator.sendBeacon ? navigator.sendBeacon(t, JSON.stringify(s)) : $.ajax({
        type: "POST",
        url: t,
        dataType: "json",
        data: JSON.stringify(s)
    })
}
var saveResultsRequestCounter = 0
  , saveResultsRequest = null
  , saveResultsRequestTimeout = null
  , saveResultsRequestData = null;
function resetSaveResultsRequestData() {
    saveResultsRequestData = null
}
function loadStudentTaskTemplate(e, t) {
    void 0 !== e && void 0 !== t && $.ajax({
        type: "GET",
        url: Routing.generate("app_api_student_quiztemplates_data", {
            id: e,
            mode: t
        }),
        dataType: "json",
        success: function(e) {
            initStudentTaskTemplate(e)
        },
        error: function(e, t, s) {
            401 == e.status && reloadPage()
        }
    })
}
function initStudentTaskTemplate(e) {
    quizTemplates.mode = e.mode,
    quizTemplates.stgId = e.stgId,
    quizTemplates.dataType = e.dataType,
    quizTemplates.dataUrl = e.dataUrl,
    quizTemplates.workingState = JSON.stringify(JSON.parse(e.workingState)),
    quizTemplates.workingDir = "/quiz/",
    quizTemplates.diff = !0,
    quizTemplates.backUrl = e.backUrl,
    quizTemplates.quizId = e.quizId,
    quizTemplates.reportError = function(e, t) {
        window.parent.reportError && window.parent.reportError(e, t)
    }
    ;
    var t = JSON.parse(e.tasksData);
    null !== t && (quizTemplates.levels = t.levels,
    quizTemplates.ids = t.ids,
    0 < t.points.length && (quizTemplates.points = t.points)),
    void 0 !== e.evalType && "" !== e.evalType && (quizTemplates.evalType = e.evalType),
    void 0 !== e.text && "" !== e.text && (quizTemplates.text = e.text),
    "perziura" === e.mode ? (quizTemplates.abilities = JSON.parse(e.tasksAbilities),
    quizTemplates.results = JSON.stringify(JSON.parse(e.results)),
    quizTemplates.attachment = e.attachment,
    "mAuthor" === quizTemplates.dataType && (quizTemplates.aggmAuthorResults = !0),
    quizTemplates.resultsCallback = function() {}
    ) : "sprendimas" === e.mode && (quizTemplates.abilities = JSON.parse(e.tasksAbilities),
    quizTemplates.attachment = e.attachment,
    quizTemplates.resultsCallback = resultsCallback,
    quizTemplates.tempResultsCallback = tempResultsCallback,
    quizTemplates.popupCallback = popupCallback,
    quizTemplates.statisticsCallback = statisticsCallback,
    quizTemplates.deleteFile = deleteFileCallback),
    quizTemplates.process()
}
function saveResults(e, t, s, a, u, n) {
    var i = !(6 < arguments.length && void 0 !== arguments[6]) || arguments[6];
    void 0 === e.percent && (e.percent = "atliko"),
    0 < $(".pe7a.ng-scope").length && (e.percent = null);
    var l = {
        studentTeachingGroupLMId: $("#studentTeachingGoupLessonMaterial").data("id"),
        studentTeachingGroupId: $("#studentTeachingGoupLessonMaterial").data("stg_id"),
        previousAction: $("#studentTeachingGoupLessonMaterial").data("previous_action")
    };
    $("#QuizUpload").off("input", resetSaveResultsRequestData),
    $("#QuizUpload").on("input", resetSaveResultsRequestData);
    var o = JSON.parse(JSON.stringify(t));
    delete o.requestNumber,
    delete o.time;
    o = {
        results: JSON.stringify(e),
        workingState: JSON.stringify(o),
        isCompleted: s
    };
    i && (clearTimeout(saveResultsRequestTimeout),
    saveResultsRequestTimeout = null),
    saveResultsRequestTimeout ? (clearTimeout(saveResultsRequestTimeout),
    saveResultsRequestTimeout = setTimeout(function() {
        saveResultsRequestTimeout = null,
        saveResults(e, t, s, a, u, n)
    }, 2e3)) : (saveResultsRequestCounter < a || u) && (saveResultsRequestCounter = a,
    JSON.stringify(o) !== JSON.stringify(saveResultsRequestData) && makeSaveResultsRequest(e, t, s, l, n),
    saveResultsRequestData = o,
    saveResultsRequestTimeout = setTimeout(function() {
        saveResultsRequestTimeout = null
    }, 2e3)),
    window.parent.setTaskCountsBars && window.parent.setTaskCountsBars()
}
function makeSaveResultsRequest(a, u, n, i, l) {
    window.parent.removeAllListeners("retryConnection");
    var e = $("#QuizUpload")
      , t = !!e.find("input").val()
      , s = {
        url: Routing.generate("student_teaching_group_lesson_material_type_task_package_solve", {
            studentTeachingGroupLMId: i.studentTeachingGroupLMId
        }),
        type: "POST",
        dataType: "json",
        data: {
            results: JSON.stringify(a),
            workingState: JSON.stringify(u),
            isCompleted: n
        },
        success: function() {
            window.parent.uploadSuccess && window.parent.uploadSuccess(),
            quizTemplates.uploadComplete(),
            window.parent.dispatchEvent(new Event("resultsSaved"))
        },
        error: function(e, t, s) {
            401 === e.status && reloadPage(),
            window.parent.uploadError && window.parent.uploadError(),
            400 === e.status && (window.parent.dispatchEvent(new Event("connectionError")),
            window.parent.connectivityError && window.parent.connectivityError(),
            window.parent.addEventListener("retryConnection", function() {
                makeSaveResultsRequest(a, u, n, i, l)
            }))
        }
    };
    1 == l && null !== saveResultsRequest && (saveResultsRequest.abort(),
    saveResultsRequest = null),
    saveResultsRequest = 0 == e.length ? $.ajax(s) : (t && window.parent.startUploading && window.parent.startUploading(),
    $("#QuizUpload").ajaxSubmit(s).data("jqxhr"))
}
function tempResultsCallback(e, t, s, a, u) {
    saveResults(e, t, !1, s, a, u, !1)
}
function popupCallback(e, t, s) {
    postFunction("showAnswersMissingPopup", [e, t, s]),
    window.parent.setTaskCountsBars && window.parent.setTaskCountsBars()
}
function resultsCallback(e, t) {
    postFunction("showTasksSolvedPopup", [e, t]),
    window.parent.setTaskCountsBars && window.parent.setTaskCountsBars()
}
function goToTaskPage(e) {
    quizTemplates.gotoPageId(e)
}
function deleteFileCallback(e) {
    resetSaveResultsRequestData(),
    $.ajax({
        type: "DELETE",
        url: Routing.generate("student_teaching_group_lesson_material_type_task_package_solve_delete_task_file", {
            studentTeachingGroupLMId: $("#studentTeachingGoupLessonMaterial").data("id"),
            taskExternalId: e
        }),
        dataType: "json",
        error: function(e, t, s) {
            401 == e.status && reloadPage()
        }
    })
}
