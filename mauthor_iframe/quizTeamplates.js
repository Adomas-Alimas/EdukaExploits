
var old = alert;

alert = function() {
  console.log(new Error().stack);
  old.apply(window, arguments);
};

function is_touch_device() {
	return !!('ontouchstart' in window        // works on most browsers
		|| navigator.maxTouchPoints);
}

var quizTemplates = new Object;
quizTemplates.dataType = 'json';
quizTemplates.instanceId = 0;
quizTemplates.allData = {};

quizTemplates.workingState = '';
//todo: set working state timestamp from server
quizTemplates.workingStateTimestamp = 0;

quizTemplates.results = '';
quizTemplates._results = {};

quizTemplates.firstTemplate = '';
quizTemplates.workingDir = '/quiz/';

quizTemplates.aggScope = '';
quizTemplates.aggResults = '';
quizTemplates.atached = '';
quizTemplates.assigned = [];

quizTemplates.subdata = new Array();
quizTemplates.subdataId = -1;
quizTemplates.hideCheckbox = false;

quizTemplates.quizId = -1;

quizTemplates.levels = [];
quizTemplates.ids = [];
quizTemplates.questionLevels = {};
quizTemplates.diff = false;
quizTemplates.openEvaluation = false;

quizTemplates.attachment = '';
quizTemplates.sprAtached = {};
quizTemplates.sprAtachedSizes = {};

quizTemplates.divId = '';

quizTemplates.aggmAuthorResults = false;
quizTemplates.paragraphVisible = false;
quizTemplates.youtubeVisible =false;

quizTemplates.goToPageIdCallback = function (pageId) {};
quizTemplates.popupCallback = function (accessedPageIDs) { $('.quizPopWrp').css('display', 'block') };
quizTemplates.printCallback = function () {};
quizTemplates.eventCallback = function (event) {};
quizTemplates.markPagesAsUnanswered = function (accessedPageIDs) {};
quizTemplates.tempResultsCallback = function(a, b) { console.log('quizTemplates.tempResultsCallback not assigned, calling quizTemplates.resultsCallback'); quizTemplates.resultsCallback(a, b); }
quizTemplates.reportError = function (id) { console.log('reporting', id); }
quizTemplates.statisticsCallback = function (id, secondsOnTask, interactionWasPerformed, points, maxPoints) { console.log(id, secondsOnTask, interactionWasPerformed, points, maxPoints); }
quizTemplates.getcurrentPageId = function() { ilid= $('.ic_page').attr('id'); return ilid };

quizTemplates.reloadMathJax = function() { MathJax.Hub.Queue(["Typeset",MathJax.Hub]); };

quizTemplates.accessedPageIDs = [];

quizTemplates.print = null;
quizTemplates.edit = null;

quizTemplates.pagaLoaded = false;
quizTemplates.mathProcessed = false;
quizTemplates.mathjaxDoneTimerId = false;
quizTemplates.DOMChangeListenerRegistered = false;
quizTemplates.repaintIntervalId = false;

quizTemplates.mathJaxFiredCount = 0;
// build will set string
quizTemplates.version = '1643013726923';

quizTemplates.requestNumber = 0;

quizTemplates.deleteFile = function(taskId) { console.log('deleting file from task', taskId) }
quizTemplates.uploadComplete = function() { parent.toggleButtonLoading($('.prideti'), false); $('.prideti').removeClass('btn'); quizTemplates.unlockControls();  $('.atached').css('display', 'block'); }
quizTemplates.uploadFailed = function() {}

quizTemplates.unlockControls = function() {
	$('#Navigation_Bar').css('pointer-events', 'auto');
	$('#NextPage1').css('pointer-events', 'auto');
	$('#PreviousPage1').css('pointer-events', 'auto');
	$('#Pabaigti').css('pointer-events', 'auto');
}

quizTemplates.lockControls = function() {
	$('#Navigation_Bar').css('pointer-events', 'none');
	$('#NextPage1').css('pointer-events', 'none');
	$('#PreviousPage1').css('pointer-events', 'none');
	$('#Pabaigti').css('pointer-events', 'none');
}

quizTemplates.getSelectedTaskList = function() {
	var ids = new Array();
	$('.doublestate-button-element-selected').each(function (index) {
		if ($(this).parent().parent().attr('id').indexOf('itm-') > -1) {
			ids.push($(this).parent().parent().attr('id').replace('itm-', ''));
		}
	});

	return ids;
}

quizTemplates.teachingGroupLessonMaterialId = null;
quizTemplates.studentTeachingGroupLessonMaterialId = null;
quizTemplates.lessonTaskPackageId = null;
quizTemplates.studentId = null;

let additionalInfo = {};

quizTemplates.reprocessPopup = function(parent_node) {

	$(parent_node).prepend('<pw class="popup-whitebox"><pw>');
	$(parent_node).find('.ic_section_button').each(function () {
		$(this).click(function() {
			$popup = $('#'+$(this).attr('id').replace('button', 'popup'))
			$popup.css('display', 'block');
			$('.popup-whitebox').css('display', 'block');
			l = ($(parent_node).outerWidth() / 2) - ($popup.outerWidth() / 2);
			t = ($(parent_node).height() / 2) - ($popup.outerHeight() / 2);

			$popup.css('top', t+'px');
			$popup.css('left', l+'px');
		});
	});

	$(parent_node).find('.ic_section_popup').each(function () {
		$(this).append('<div class="closePopup">');
		$(this).find('.closePopup').click(function() {
			$(this).parent().css('display', 'none');
			$('.popup-whitebox').css('display', 'none');
		});
	});

}

quizTemplates.hackSelectHtmlEntities = function(prefix) {
	ws = unnest(player.getState());
	if (prefix == '') {
		prefix = $('.ic_page').attr('id');
	}
	$('.text_questionBody select').each(function () {
		try {
			gapParentId = prefix + $(this).closest('.text_questionBody').attr('id');
			gapNum = $(this).attr('id').split('-')[1];
			wStateVal = ws['state'][gapParentId]['values'][ws['state'][gapParentId]['gapUniqueId'] + '-' + gapNum];
			if (wStateVal.indexOf('&') > -1) {
				wStateIndex = 0;
				$(this).children().each(function (index) {
					if (wStateVal == $(this).attr('value').replace('&amp;', '&')) {
						wStateIndex = index;
					}
				});
				$(this).prop('selectedIndex', wStateIndex);
				$(this).removeClass('ic_inlineChoice-empty');
			}
		} catch(e) {
		}
	});
}

quizTemplates.reprocessHrefs = function(parent_node) {

	addParam = '';
	if (quizTemplates.tgId != undefined) {
		addParam = '?tgId='+ quizTemplates.tgId;
	} else if (quizTemplates.stgId != undefined) {
		addParam = '?stgId='+ quizTemplates.stgId;
	}

	if (addParam == '') {
		if (window.parent.location.href.indexOf('studentTeachingGroupId') > 0) {
			_params = window.parent.location.href.split('?')[1].split('&');
			for (prm of _params) {
				prm = prm.split('=');
				if (prm[0] == 'studentTeachingGroupId') {
					addParam = '?stgId='+ prm[1];
				}
			}
		}
	}

	$(parent_node).find('a').each(function() {
		href = $(this).attr('href');
		if (href.indexOf('../') > -1 ) {
			try {
				urlPath = '/' + href.split('../')[1];
				component = urlPath.replace('"', '').replaceAll('/', '%252F').replaceAll('?', '%253F').replaceAll('=', '%253D').replaceAll('&', '%2526');
				href = 'https://' + location.hostname + '/authenticated/link/task-package/' + component + '/' + addParam;
			} catch(e) {

			}
		}
		if (href.indexOf(';http') > -1 ) {
			urlPath = 'http' + href.split(';http')[1];
			href = urlPath.replace('"', '');
		}
		console.log(parent_node, 'edited href', href);
		$(this).attr('href', href);
		$(this).click(function() {
			href = $(this).attr('href');
			window.open(href, '_blank');
		});

	});
}

quizTemplates.notionClick = function (ui) {
	offset = $('.ic_static_header').length ? $('.ic_static_header').height() : 0;
	popupMargin = 10;

	$('.notion-popup').remove();
	$('.ic_page').append('<pp class="notion-popup"><p>'+ui.attr('data')+'</p><pp class="closeNotion"></pp>');
	$('.notion-popup').css('display', 'block');
	$('.notion-popup .closeNotion').click(function() { $('.notion-popup').remove(); });

	tp = ui.offset().top - offset - $('.notion-popup').outerHeight() - popupMargin;
	lf = ui.offset().left + (ui.outerWidth() / 2) - ($('.notion-popup').outerWidth() / 2);

	if (tp < offset) {
		tp = ui.offset().top + ui.height() - offset + popupMargin;
	}

	if (lf < 0) { lf = 0;}
	if (lf + $('.notion-popup').outerWidth() > $('.ic_page').width()) {
		lf = $('.ic_page').width() - $('.notion-popup').outerWidth();
	}

	$('.notion-popup').css('top', tp+'px');
	$('.notion-popup').css('left', lf+'px');

	quizTemplates.reprocessHrefs('.notion-popup');
}

// -------------------- STATES ---------------------------
quizTemplates.state = {};
quizTemplates.detectIE = function() {
    var ua = window.navigator.userAgent;

    var msie = ua.indexOf('MSIE ');
    if (msie > 0) {
        // IE 10 or older => return version number
        return parseInt(ua.substring(msie + 5, ua.indexOf('.', msie)), 10);
    }

    var trident = ua.indexOf('Trident/');
    if (trident > 0) {
        // IE 11 => return version number
        var rv = ua.indexOf('rv:');
        return parseInt(ua.substring(rv + 3, ua.indexOf('.', rv)), 10);
    }

    var edge = ua.indexOf('Edge/');
    if (edge > 0) {
       // Edge (IE 12+) => return version number
       return parseInt(ua.substring(edge + 5, ua.indexOf('.', edge)), 10);
    }

    // other browser
    return false;
}
// selector = '.active'
quizTemplates.markAsDone = function(selector){
  $('ul.navbar-nav li'+selector+' a .burbulas').addClass('completed');
}

quizTemplates.markAsDone2 = function(selector){
  $('ul.navbar-nav li a'+selector+' .burbulas').addClass('completed');
}

quizTemplates.saveState = function(id, state, stateZone) {
  if(typeof(stateZone) === 'undefined'){var stateZone = 'defaultZone';}
  if (!(id in quizTemplates.state)) {
    quizTemplates.state[id] = {};
  }

  quizTemplates.state[id][stateZone] = state;

  if ((quizTemplates.mode == 'sprendimas')) {
	  localStorage.setItem(quizTemplates.quizId+'-saved', 1);
	  localStorage.removeItem(quizTemplates.quizId+'-data');
	  localStorage.setItem(quizTemplates.quizId+'-data', JSON.stringify(quizTemplates.state));

	  /*
	  localStorage.removeItem(quizTemplates.quizId+'-rezults');
	  localStorage.setItem(quizTemplates.quizId+'-rezults', JSON.stringify(quizTemplates._results));
	  */
  }
}

var CUSTOM_EVENTS = {
	'CUI': 'CustomUserInteractionEvent',
	'LSS': 'LocalStateSavedEvent'
};

$(document).on(CUSTOM_EVENTS.CUI,
	function (objectEvent, userEvent) {

		if (quizTemplates.mode == 'sprendimas') {

			quizTemplates.eventCallback(userEvent);

			quizTemplates.saveLocalState()
				.done(function (stateObject) {
					$('#_icplayer').trigger(CUSTOM_EVENTS.LSS, stateObject);
				});
		}
	});

function isElementVisible ($element) {
	return $element.length && $element.css('visibility') !== 'hidden' && $element.css('display') !== 'none' && $element.outerHeight() !== 0;
}

var dynamicHeightCalculator = {
	setElementHeights: function ($elements, height) {
		$.each($elements, function () {
			$(this).height(height);
		});

		return dynamicHeightCalculator;
	},
	setElementTopPositions: function ($elements, top) {
		$.each($elements, function () {
			$(this).css('top', top);
		});

		return dynamicHeightCalculator;
	},
	isElementAbsolute: function ($element) {
		var elementPositionType = $element.css('position');

		return 'absolute' === elementPositionType || 'fixed' === elementPositionType;
	},
	getNonStaticElementHeight: function ($element) {
		var $parent = $element.parent(),
			elementHeight = $element.outerHeight(true),
			elementAbsoluteTop = $element.position().top;

		if (!$parent.hasClass('ic_page')) {
			elementAbsoluteTop += $parent.position().top;
		}

		if ($element.hasClass('ic_static_header')) {
			return elementHeight;
		}

		return elementAbsoluteTop + elementHeight;
	},
	getMaxHeight: function ($element) {
		if (dynamicHeightCalculator.isElementAbsolute($element) && $element.outerHeight() !== 0) {
			var nonStaticElementHeight = dynamicHeightCalculator.getNonStaticElementHeight($element);
			var outerHeight = $element.outerHeight(true);
			if (nonStaticElementHeight > outerHeight) {
				return nonStaticElementHeight;
			}

			return outerHeight;
		}

		//Parent elements with absolute positioning don't have a height so we need to retrieve the height of their children
		//Also if elements are on the same line horizontally (top values are similar~) then don't sum all of their heights up and only use one of them
		var $filteredChildren = $element
			.children(':visible')
			.filter(function () {
				return $(this).css('visibility') !== 'hidden';
			});

		return dynamicHeightCalculator.getMaxHeightForElements($filteredChildren);
	},
	getMaxHeightForElements: function ($elements) {
		var heightSum = 0;
		$elements.each(function () {

		    if ($(this).hasClass('prideti') || $(this).hasClass('atached') ) {}
		    else {
                var maxHeight = dynamicHeightCalculator.getMaxHeight($(this));
                if (maxHeight > heightSum) {
                    heightSum = maxHeight;
                }
            }
		});
		return heightSum;
	},

	adjustOverlappingElements: function () {
		$('.addon_Scrollable').each(function() {

                var $overlappingElements = $(this).children(':visible').overlaps().filter(function () {
                    return $(this).css('visibility') !== 'hidden';
                });

                $overlappingElements.each(function () {
                    var $childElement1 = $(this);
                    $overlappingElements.each(function () {
                        var $childElement2 = $(this),
                            isChildElement2Higher = $childElement2.position().top > $childElement1.position().top;
                        if (isChildElement2Higher && $childElement1.get(0) !== $childElement2.get(0) && $childElement1.overlaps($childElement2).length) {
                            $childElement2.css('top', $childElement1.position().top + $childElement1.outerHeight());
                        }
                    });
                });

            });

		return dynamicHeightCalculator;
	},

	adjustSourceListPairHeights: function () {
		var $sourceList = $('.sourceList_pair');

		if (!$sourceList.length) {
			$sourceList = $('.ic_sourceList');
		}

		if (!$sourceList.length) {
			return dynamicHeightCalculator;
		}

        $sourceList.each(function() {

            var $sourceListItems = $(this).find('.ic_sourceListItem'),
                sourceListPairHeight = 0;

            $sourceListItems.each(function () {

                $(this).css('height', 'auto');

                var $currentItem = $(this),
                    height = Math.floor($currentItem.height() * 0.1) * 10;
                if (height > sourceListPairHeight) {
                    sourceListPairHeight = height;
                }
            });

            $sourceListItems.css('height', sourceListPairHeight + 'px');

		});


		return dynamicHeightCalculator;
	},
	adjustButtonPositions: function (mainCellHeightSum) {
		var $nextBtn = $('#NextPage1'),
			$prevBtn = $('#PreviousPage1'),
			$doneBtn = $('#Done1'),
			$resetBtn = $('#Reset1'),
			$endBtn = $('#Pabaigti');

		if (!$endBtn.length || !$doneBtn.length || !$resetBtn.length) {
			return dynamicHeightCalculator;
		}

		var bottomBtnTopPosition = mainCellHeightSum;
		if (isElementVisible($endBtn)) {
			bottomBtnTopPosition -= $endBtn.outerHeight(true);
		} else if (isElementVisible($doneBtn)) {
			bottomBtnTopPosition -= $doneBtn.outerHeight(true);
		}

		dynamicHeightCalculator.setElementTopPositions([$endBtn, $doneBtn, $resetBtn], bottomBtnTopPosition);

		var prevNextBtnHeight = bottomBtnTopPosition;
		if (isElementVisible($prevBtn)) {
			prevNextBtnHeight -= $prevBtn.outerHeight(true);
		} else if (isElementVisible($nextBtn)) {
			prevNextBtnHeight -= bottomBtnTopPosition - $nextBtn.outerHeight(true);
		}

		dynamicHeightCalculator.setElementTopPositions([$nextBtn, $prevBtn], prevNextBtnHeight);

		return dynamicHeightCalculator;
	},
	getMaxButtonHeight: function () {
		var btnHeight = 0;
		$.each([$('#Done1'), $('#Reset1'), $('#Pabaigti')], function () {
			var $this = $(this);
			if (!isElementVisible($this)) {
				return;
			}
			var outerHeight = $this.outerHeight(true);
			//console.log('%c outerHeight of button ' + $(this).attr('id') + ' is ' + outerHeight, 'color: maroon');
			if ( $(this).attr('id') == 'Pabaigti' ) {
                outerHeight = 61;
			}
			if (outerHeight > btnHeight) {
				btnHeight = outerHeight;
			}
		});

		var $prevButton = $('#PreviousPage1'),
			$nextButton = $('#NextPage1'),
			isPrevBtnVisible = $prevButton.length && isElementVisible($prevButton),
			isNextBtnVisible = $nextButton.length && isElementVisible($nextButton);

		if (isPrevBtnVisible || isNextBtnVisible) {
			btnHeight += $prevButton.outerHeight(true) ? $prevButton.outerHeight(true) : $nextButton.outerHeight(true);
		}

		return btnHeight;
	},
	//This must be executed at the end of the page load
	calculateHeights: function () {
		var $scrollableBody = $('#scrollableBody'),
			$mainTable = $('.ic_player'),
			$mainTableCells = $mainTable.find('> tbody > tr > td'),
			$mainTableCell,
			navHeight = 0;

		if ($mainTableCells.find('.ui-draggable-dragging').length) {
			setTimeout(dynamicHeightCalculator.calculateHeights, 100);

			return dynamicHeightCalculator;
		}

		//Handles case where there is no navigation
		if ($mainTableCells.length > 1) {
			navHeight = dynamicHeightCalculator.getMaxHeight($mainTableCells.find('.ic_static_header'));
			$mainTableCell = $mainTableCells.eq(1);
		} else {
			$mainTableCell = $mainTableCells.eq(0);
		}

		var $mainPagePanel = $mainTableCell.find('.ic_page_panel'),
			$panelMainDiv = $mainPagePanel.find('.ic_page'),
			dynamicBtnIDs = ['PreviousPage1', 'NextPage1', 'Done1', 'Reset1', 'Pabaigti'],
			$childDivs = $panelMainDiv.children(':visible').filter(function () {
				var $this = $(this),
					isElementNotDynamicBtn = dynamicBtnIDs.indexOf($this.attr('id')) === -1;

				return $this.css('visibility') !== 'hidden' && isElementNotDynamicBtn;
			});

		$panelMainDiv.css('top', 0);

		var maxButtonHeight = dynamicHeightCalculator.getMaxButtonHeight(),
			mainCellHeight = dynamicHeightCalculator.getMaxHeightForElements($childDivs) + maxButtonHeight,
			fullPageHeight = mainCellHeight + navHeight,
			extraPageMargin = 49;

		if ($('.ic_page').width() != 1140) {
			extraPageMargin = -16;
		}

        if ((quizTemplates.mode === 'perziura') && ($('.addon_Paragraph').length) && ($('.ic_page').width() != 1140)) {
            mainCellHeight = mainCellHeight + 75;
            fullPageHeight = fullPageHeight + 75;
        }

		dynamicHeightCalculator
			.setElementHeights([$scrollableBody, $mainTable], fullPageHeight + extraPageMargin)
			.setElementHeights([$mainTableCell, $mainPagePanel, $panelMainDiv], mainCellHeight + extraPageMargin)
			.adjustOverlappingElements()
			.adjustSourceListPairHeights()
			.adjustButtonPositions(mainCellHeight)
		;

		return dynamicHeightCalculator;
	}
};

$(window).unload(function() {
	quizTemplates.mAuthorCheck(false, true);
	try {
		MathJax.Hub.signal.hooks["End Process"].Remove(quizTemplates.mathJaxHook);
	} catch (e) {

	}
	quizTemplates.saveLocalState();
});

$(window.parent).bind('beforeunload',
	function(){
		quizTemplates.mAuthorCheck(false, true);
		try {
			MathJax.Hub.signal.hooks["End Process"].Remove(quizTemplates.mathJaxHook);
		} catch (e) {

		}
		quizTemplates.saveLocalState();
	});


function getUTCUnixTimestamp() {
	//TODO: replace with our custom endpoint?
	return $.get('https://worldtimeapi.org/api/timezone/UTC');
}

function replaceFinishButtonWithLoader() {

	/*
	if (($('#Pabaigti').length) && (quizTemplates.mode == 'sprendimas')) {
		var $finishBtn = $('#Pabaigti'),
			$parentContainer = $finishBtn.parent();

	if ($parentContainer.find('.btn-loader').length) {
		return;
	}

	var loaderSize = 20,
		//align the loader in the middle of the button
		left = $finishBtn.position().left + ($finishBtn.innerWidth() / 2) - (loaderSize / 2) + 'px',
		$loaderElement = $("<img class='btn-loader' src='/quiz/img/btn-loader.gif'>")
			.css({
				'position': 'absolute',
				'top': $finishBtn.css('top'),
				'right': $finishBtn.css('right'),
				'bottom': $finishBtn.css('bottom'),
				'left': left,
				'width': loaderSize + 'px',
				'height': 'auto',
			});

		//$finishBtn.css('visibility', 'hidden');
		//$parentContainer.append($loaderElement);
	}
	*/
}

function replaceLoaderWithFinishButton() {

	/*
	if (($('#Pabaigti').length) && (quizTemplates.mode == 'sprendimas')) {
		$('.btn-loader').remove();
		$('#Pabaigti').css('visibility', 'visible');
	}
	*/
}


quizTemplates.saveLocalState = function () {
	var deferred = $.Deferred();

	replaceFinishButtonWithLoader();

	var timestamp,
		stateObject;

	player.forceScoreUpdate();

	//getUTCUnixTimestamp()
	//	.done(function (res) {
	//		timestamp = res.unixtime;
	//	})
	//	.fail(function (err) {
			timestamp = new Date().getTime();
	//	})
	//	.always(function () {

				st = JSON.parse(player.getState());
				st.accessed = quizTemplates.accessedPageIDs;
			stateObject = {
				'timestamp': timestamp,
                'state': JSON.stringify(st),
			};

			localStorage.setItem(quizTemplates.quizId, JSON.stringify(stateObject));
			replaceLoaderWithFinishButton();
			deferred.resolve(stateObject);
	//	});

	return deferred;
};

quizTemplates.loadSavedLocalState = function () {
	var savedStateObject = JSON.parse(localStorage.getItem(quizTemplates.quizId));
	if ((quizTemplates.mode == 'sprendimas')) {
		if (savedStateObject && savedStateObject.timestamp > quizTemplates.workingStateTimestamp) {
			quizTemplates.workingState = savedStateObject.state;
			quizTemplates.workingStateTimestamp = savedStateObject.timestamp;
		}
	}
};

quizTemplates.clearState = function(id, stateZone) {
  if(typeof(stateZone) === 'undefined'){var stateZone = 'defaultZone';}
  if (quizTemplates.state[id] != undefined) {
    if (quizTemplates.state[id][stateZone] != undefined) {
      quizTemplates.state[id][stateZone] = '';
    }
  }
}

quizTemplates.printState = function(id) {
 console.log('State is', quizTemplates.state);
 console.log('State is', JSON.stringify(quizTemplates.state));
}

quizTemplates.getState = function(id, stateOwner, stateZone) {
  if(typeof(stateOwner) === 'undefined'){var stateOwner = -1;}
  if(typeof(stateZone) === 'undefined'){var stateZone = 'defaultZone';}
   result = '';
   if (stateOwner == -1) {
     if (quizTemplates.state[id] != undefined) {
       if (quizTemplates.state[id][stateZone] != undefined) {
         result = quizTemplates.state[id][stateZone];
       }
     }
   } else {
	 if (quizTemplates.state.allStates[stateOwner][id] != undefined) {
       if (quizTemplates.state.allStates[stateOwner][id][stateZone] != undefined) {
         result = quizTemplates.state.allStates[stateOwner][id][stateZone];
       }
     }
   }
   return result;
}

// ---------------------------------------------------------
quizTemplates.parseData = function(default_value){
  if(typeof(default_value) === 'undefined'){var default_value = ['default_value', 'not passed'];}
  var prmstr = window.location.href.split('?')[1];
  // console.log(prmstr);
  var data = '';
  var params = {};
  params[default_value[0]] = default_value[1];
  if(prmstr){
    var prmarr = prmstr.split("&");
    if (prmarr && (prmarr.length > 1)) {
      for (var i = 0; i < prmarr.length; i++) {
        var tmparr = prmarr[i].split("=");
        data = tmparr[1].replace(/%2F/g, "/");
        data = data.replace(/%3A/g, ":");
        data = data.replace(/%3F/g, "?");
        data = data.replace(/%3D/g, "=");
        data = data.replace(/%26/g, "&");
        params[tmparr[0]] = data;
      }
    }
  }
  // console.log( params );
  return params;
}

quizTemplates.getActiveMenuItem = function(){
  var hash = window.location.hash.substring(2);
  var dataIndex=0;
  for(var i = 0, len = quizTemplates.allData.data.length; i < len; i++) {
    if (quizTemplates.allData.data[i].json.name === hash) {
      dataIndex = i;
      break;
    }
  }
  if(hash!=''){
    $('.navbar-nav > li >a#'+hash).closest( "li" ).addClass('active');
  }
  return dataIndex;
}
quizTemplates.parseMode = function(){
  var idd, data;
  if(quizTemplates.mode==='sprendimas'){
    idd = '';
    var dataIndex=quizTemplates.getActiveMenuItem();
    data = quizTemplates.allData.data[dataIndex].json;
  }

  if(quizTemplates.mode==='demonstracija'){
    idd = '';
    var dataIndex=quizTemplates.getActiveMenuItem();
    data = quizTemplates.allData.data[dataIndex].json;
  }

  if(quizTemplates.mode==='priskyrimas-uzrakinta'){
    quizTemplates.instanceId = quizTemplates.instanceId + 1;
    idd = ' #id'+quizTemplates.instanceId;
    data = quizTemplates.allData.data[quizTemplates.instanceId-1].json;
  }

  if(quizTemplates.mode==='priskyrimas'){
    quizTemplates.instanceId = quizTemplates.instanceId + 1;
    idd = ' #id'+quizTemplates.instanceId;
    data = quizTemplates.allData.data[quizTemplates.instanceId-1].json;
  }

  if(quizTemplates.mode==='perziura'){
    quizTemplates.instanceId = quizTemplates.instanceId + 1;
    idd = ' #id'+quizTemplates.instanceId;
    data = quizTemplates.allData.data[quizTemplates.instanceId-1].json;
  }

  if(quizTemplates.mode==='iliustra'){
    quizTemplates.instanceId = quizTemplates.instanceId + 1;
    idd = ' #id'+quizTemplates.instanceId;
    data = quizTemplates.allData.data[quizTemplates.instanceId-1].json;
  }

  return {idd:idd, data:data}
}

quizTemplates.shuffle = function(array) {
    var j, x, i;
    for (i = array.length; i; i -= 1) {
      j = Math.floor(Math.random() * i);
      x = array[i - 1];
      array[i - 1] = array[j];
      array[j] = x;
    }
}

quizTemplates.getRandomInt = function(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
}

quizTemplates.isItemInArray = function(array, item) {
    for (var i = 0; i < array.length; i++) {
        // This if statement depends on the format of your array
        if (array[i][0] == item[0] && array[i][1] == item[1]) {
            return true;   // Found it
        }
    }
    return false;   // Not found
}

function getRemote(remote_url) {
	var rt = '';
    rT = $.ajax({
        type: "GET",
        url: remote_url,
        async: false
    }).responseText;

    rT = he.decode(rT);

    rT = rT.replace(/\|sup\|/g, '<sup>').replace(/\|\-sup\|/g, '</sup>').replace(/\|sub\|/g, '<sub>').replace(/\|\-sub\|/g, '</sub>').replace(/\|Box/g, 'ā–').replace(/\&lt;/g, '<').replace(/\&gt;/g, '>');
    return rT;

    //.responseText.replace(/&nbsp;/g, ' ').replace(/&atilde;/g, 'a').replace(/&Atilde;/g, 'A').replace(/&shy;/g, '').replace(/\|sup\|/g, '<sup>').replace(/\|\-sup\|/g, '</sup>').replace(/\|sub\|/g, '<sub>').replace(/\|\-sub\|/g, '</sub>').replace(/&times;/g, 'Ć—').replace(/\|times/g, 'Ć—').replace(/\|Box/g, 'ā–').replace(/&deg;/g, 'Āŗ').replace(/&middot;/g, 'ā€¢').replace(/&mdash;/g, 'ā€”');
}

function parseXml(xml) {
    var dom = null;
	try {
		dom = (new DOMParser()).parseFromString(xml, "text/xml");
	}
	catch (e) {
		dom = null;
	}
    return dom;
}

quizTemplates.percentToPoints = function(score, errors, maxScore, maxPoints) {
    var percent = Math.round(Math.min(score, maxScore - errors) / maxScore * 100);

    if (maxScore == 0) {
        return 0;
    }

    if (maxPoints == 0) {
        return 0;
    } else if (maxPoints == 1) {
        if (percent <= 50) {
            return 0
        } else {
            return 1;
        }
    } else if (maxPoints == 2) {
        if (percent <= 20) {
            return 0
        } else if (percent <= 70) {
            return 1;
        } else {
            return 2;
        }
    } else if (maxPoints == 3) {
        if (percent <= 10) {
            return 0
        } else if (percent <= 45) {
            return 1;
        } else if (percent <= 85) {
            return 2;
        } else {
            return 3;
        }
    } else if (maxPoints == 4) {
        if (percent <= 10) {
            return 0
        } else if (percent <= 35) {
            return 1;
        } else if (percent <= 60) {
            return 2;
        } else if (percent <= 85) {
            return 3;
        } else {
            return 4;
        }
    } else if (maxPoints == 5) {
        if (percent <= 10) {
            return 0
        } else if (percent <= 35) {
            return 1;
        } else if (percent <= 55) {
            return 2;
        } else if (percent <= 75) {
            return 3;
        } else if (percent <= 90) {
            return 4;
        } else {
            return 5;
        }
    } else {

		if (isNaN(percent)) { percent = 0;}
		if (percent < 0) { percent = 0;}

        return Math.round(maxPoints*percent/100);
    }
}

quizTemplates.goto = function(href) {
	setTimeout(function() {href.click();}, 0);
}

quizTemplates.prev = function() {
	jPrev = $('.navbar-nav li.active').prev();
	if (jPrev.length) {
		quizTemplates.goto(jPrev.children('a')[0]);
	} else {
		jPrev = $('.navbar-nav li:last');
		quizTemplates.goto(jPrev.children('a')[0]);
	}
}

quizTemplates.next = function() {
	jNext = $('.navbar-nav li.active').next();
	if (jNext.length) {
		quizTemplates.goto(jNext.children('a')[0]);
	} else {
		jNext = $('.navbar-nav li:first');
		quizTemplates.goto(jNext.children('a')[0]);
	}
}

quizTemplates.setDone = function(id, done, dontClose) {
  if(typeof(dontClose) === 'undefined'){var dontClose = 'false';}
  // alert('set done');
	if (quizTemplates.getState(id, -1, 'done') != 'done') {
		quizTemplates.saveState(id, done, 'done');
	}

	if (quizTemplates.dataType == 'xml') {
		idParentStr = $('.navbar-nav .active a').attr('id');
		if (idParentStr != undefined) {
			tpl = idParentStr.split('-');
			tpl = tpl[tpl.length-1];
			idParent = idParentStr.replace('tpl-', '').replace('-'+tpl, '');
			if (id != idParent) {
				quizTemplates.setDone(idParent, done, dontClose);
			}
		}
	}



	if (quizTemplates.dataType == 'json') {
		quizTemplates.checkDone();
		quizTemplates.setResults(id, true);
	}
  quizTemplates.markAsDone('.active');

  var all_tasks_completed = true;
  $('ul.navbar-nav li').each(function(index, value){
    if (!( $($(value).find('a').find('.burbulas')).hasClass('completed'))) {
      all_tasks_completed = false
    }
  })
  // if ((all_tasks_completed) && (quizTemplates.mode == 'json')){
  //   $('.error').css('display', 'block');
  //   $('.popup').addClass('all-tasks-completed');
  //   $('.popup').html('SVEIKINAME<br><br>JÅŖS PABAIGÄ–TE VISAS UÅ½DUOTIS<br><br><div class="bu bu-check refresh-button" onclick="location.reload();">KARTOTI</div>');

  // }
  return {'all_tasks_completed':all_tasks_completed};
}

quizTemplates.ReprocessHeights = function(callFromMathJaxHook, fromInterval) {

	dynamicHeightCalculator.adjustSourceListPairHeights();

    if (callFromMathJaxHook === true) {
        //console.log('%cIncreasing mathJaxFiredCount', 'color:goldenrod');
        quizTemplates.mathJaxFiredCount = quizTemplates.mathJaxFiredCount + 1;
    }

    var addedTop = 0;
    var addedTop_ = 0;

    if ( $('.report_error').length) { oldFormat = false;} else {oldFormat = true;}

    if (($('.addon_Paragraph').length) || (oldFormat == true)) {}
    else {

        $('.ic_page').children().each(function () {

            $this = $(this);

            if (['ic_text ic_levelItem', 'addon_Double_State_Button', 'report_error', 'eval-points-wrp', 'addon_Double_State_Button eval-points-wrp'].indexOf($this.attr('class')) > -1) {
                var tp = parseFloat($this.css('top').replace('px', ''));
                origTp = tp;
                tp = tp + addedTop_;
                $this.css('top', tp + 'px');

            } else {
                var tp = parseFloat($this.css('top').replace('px', '')) + addedTop;
				if ((!$this.hasClass('addon_Advanced_Connector')) && (!$this.hasClass('multiplegap_4c'))) {
					$this.css('top', tp + 'px');
				}

                try {
                    if ($this.prev().hasClass('eval-points-wrp')) {
                        addedTop_ = addedTop;
                    } else if ($this.prev().attr('id').startsWith('status-false')) {
                        addedTop_ = addedTop;
                    }
                } catch (e) {

                }

            }

            //:not(.mathLineHeight)
			if (($this.hasClass('ic_text')) && ($this.is(":visible")) && (!$this.hasClass('ic_levelItem')) && ($this.attr('id').indexOf('Text_add') == -1) ) {

                $next = $this.next();
                if ($next.hasClass('addon_EventCapture')) {
                    $next = $this.next().next();
                }

                if ($next.hasClass('addon_Audio')) {
                    $next = $next.next();
                }

                if (($next.hasClass('amokytoj')) && ($next.is(":hidden"))) {
                    $next = $next.next().next().next().next().next();
                }

                if (($next.hasClass('tpl8aPrm')) && ($next.is(':hidden')) ) {
                    $next = $next.next();
                }

                var overflow2 = $next.position().top - ($this.position().top + parseFloat($this.css('margin-top').replace('px')) + $this.outerHeight() + 30);

                if (['TextEasy', 'SelectEasy', 'TextMedium', 'SelectMedium', 'TextHard', 'SelectHard', 'TextShowAnsvers', 'Show_Answers1', 'Filter_Connector'].indexOf($this.attr('id')) == -1) {
                    addedTop = overflow2 * (-1);
                }

            }

			thisId = $this.attr('id');
			if (thisId == undefined) {
				thisId = 'undefined';
			}

			if (($this.hasClass('text_questionBody')
				|| $this.hasClass('text_questionBodyDirect')
				|| $this.hasClass('addon_equation_editor')
				|| $this.hasClass('addon_Text_Coloring')
				|| $this.hasClass('ic_ordering')
				|| $this.hasClass('addon_TrueFalse')
				|| $this.hasClass('sourceList_group')
				|| $this.hasClass('sourceList_pair')
				|| $this.hasClass('sourceList_forText')
				|| $this.hasClass('_ic_choice')
				|| (thisId.indexOf('Text_add') > -1)

            ) && ($this.is(":visible")) && (!$this.hasClass('ic_levelItem'))) {

                $next = $this.next();

                if ($next.hasClass('addon_MathDraggableHack')) {
                    $next = $next.next();
                }

                if ($next.hasClass('ic_levelItem')) {

                	if (quizTemplates.mode === 'perziura') {
                        $next = $next.next().next().next().next().next();
                    } else {
                        $next = $next.next().next().next().next();
                    }


                    if ($next.attr('id').indexOf('status-true') > -1) {
                        $next = $next.next().next();
                    }

                    if (!$next.hasClass('addon_Single_State_Button')) {

                    	var overflow2 = 155 - ($next.position().top + parseFloat($next.css('margin-top').replace('px')) - ($this.position().top + $this.outerHeight()));
                        addedTop = overflow2;
                    }

                }

                if ($next.hasClass('sourceList_forText') || (thisId.indexOf('Text_add') > -1)) {
                    var overflow2 = $next.position().top - ($this.position().top + parseFloat($this.css('margin-top').replace('px')) + $this.outerHeight() + 30);
                    //console.log($this, $next, overflow2);
                    addedTop = overflow2 * (-1);
                }

                if ($next.hasClass('ic_button_reset')) {

                    aAc = ($this.position().top + $this.outerHeight());
                    if ($('.ic_page').width() == 1140) {
                        aAc = aAc + 30;
                    }
                    $('.addon_Advanced_Connector').css('top', aAc + 'px');

                }


            }

            if ($this.hasClass('addon_Co')) {

                if ($this.next().hasClass('ic_button_reset')) {

                    aAc = ($this.position().top + $this.outerHeight());
                    if ($('.ic_page').width() == 1140) {
                        aAc = aAc + 30;
                    }
                    $('.addon_Advanced_Connector').css('top', aAc + 'px');

                }
            }

        });
    }

	if ($('.ic_page').width() < 1140) {
		if ($('.ic_page .ic_txt_help').length) {
			if (quizTemplates.mode == 'demonstracija') {
				oldTop = $('.addon_Advanced_Connector').css('top');
				ttp = $('.ic_txt_help').position().top + $('.ic_txt_help').height() + 10;
				$('.addon_Advanced_Connector').css('top', ttp + 'px');

				if ($('.addon_Advanced_Connector').css('top') != oldTop) {
					addedTop = 1;
				}
			}
		}
	}

    $('.ic_page img').each(function () {
        tp = $(this).css('top');
        $(this).attr('orig-tp', tp);
    });

    if ((fromInterval == false) || (addedTop != 0)) {
        //console.log(fromInterval, addedTop);
        quizTemplates.recalculatePageHeight();
        quizPageLoaded = true;

        if (quizTemplates.mathJaxFiredCount > 0) {
            //console.log('%cRaising flag for MathDraggableHack', 'color: goldenrod');
            quizTemplates.hackProcessed = true;
        }
    }


}

quizTemplates.process = function(divId) {

    //console.log('%cQuizTemplates starting', 'color: green');
    //console.log($('body').height());

    if (quizTemplates.openEvaluation == true && quizTemplates.mode == 'perziura') {
        $('.quizDiv').addClass('perziura');
    }
	if (quizTemplates.mode == 'demonstracija') {
		$('.quizDiv').removeClass('priskyrimas-uzrakinta').addClass('demonstracija');
	}

	quizTemplates.teachingGroupLessonMaterialId = null;
	quizTemplates.studentTeachingGroupLessonMaterialId = null;
	quizTemplates.lessonTaskPackageId = null;
	quizTemplates.studentId = null;

	if (window.location.href.indexOf('teacher/lesson-material/task-data') > 0) {
		quizTemplates.teachingGroupLessonMaterialId = window.location.href.split('/')[6];
	}

	if (window.location.href.indexOf('teacher/lesson-material/student/task-data') > 0) {
		quizTemplates.teachingGroupLessonMaterialId = window.location.href.split('/')[9].split('?')[0];
	}

	if (window.location.href.indexOf('student/lesson-material') > 0) {
		quizTemplates.studentTeachingGroupLessonMaterialId = window.location.href.split('/')[7];
	}

	if (window.location.href.indexOf('publisher/material') > 0) {
		quizTemplates.lessonTaskPackageId = window.location.href.split('lessonTaskPackageId=')[1];
	}

	additionalInfo.teachingGroupLessonMaterialId = quizTemplates.teachingGroupLessonMaterialId;
	additionalInfo.studentTeachingGroupLessonMaterialId = quizTemplates.studentTeachingGroupLessonMaterialId;
	additionalInfo.lessonTaskPackageId = quizTemplates.lessonTaskPackageId;
	additionalInfo.studentId = quizTemplates.mokId;

    if (window.parent.location.href.indexOf('storage') > 0) {
        $('.quizDiv').addClass('storage');
    }

    if (window.parent.location.href.indexOf('publisher') > 0) {
        $('.quizDiv').addClass('publisher');
    }

    try {
        quizTemplates.attachment = JSON.parse(quizTemplates.attachment);

        for (mok in quizTemplates.attachment) {
            for (f in quizTemplates.attachment[mok]) {
				for (file_num in quizTemplates.attachment[mok][f]) {
					quizTemplates.sprAtached[f] = quizTemplates.attachment[mok][f][file_num][0].FileName;
					quizTemplates.sprAtachedSizes[f] = quizTemplates.attachment[mok][f][file_num][0].FileSize;
				}
            }
        }
    } catch (e) {

    }

	//console.log(quizTemplates.attachment);


	if ((quizTemplates.dataType == 'json') || (quizTemplates.dataType == 'xml')) {
		quizTemplates.process_timed(divId);
	} else {
		//setTimeout(function() { quizTemplates.process_timed(divId) }, 5000);
		$('.quizDiv').css('display', '');
		pInt = setInterval( function() {
				if (typeof icCreatePlayer === 'function') {

					clearInterval(pInt);
					quizTemplates.process_timed(divId);
				}
			}, 100 );
	}

	setInterval( function () {
			if ($('.ui-draggable-dragging').length) {

				matrixRegex = /matrix\((-?\d*\.?\d+),\s*0,\s*0,\s*(-?\d*\.?\d+),\s*0,\s*0\)/
				scale = parseFloat($(window.parent.document).find('#mauthor-iframe').css('transform').match(matrixRegex)[1]);

				draggableElem = $('.ui-draggable-dragging');
				mtp = parseFloat(draggableElem.attr('mtp'));

				if (!isNaN(mtp)) {
					elementTop = draggableElem[0].getBoundingClientRect().top + mtp;
					elementBottom = draggableElem[0].getBoundingClientRect().top + mtp;
				} else {
					elementTop = draggableElem[0].getBoundingClientRect().top;
					elementBottom = draggableElem[0].getBoundingClientRect().bottom;
				}


				iFrameTop = $(window.parent.document).find('#mauthor-iframe').offset().top;
				WindowScroll = $(window.parent)['scrollTop']();
				WindowHeight = window.parent.innerHeight;

				needScrollUp = (elementTop*scale) + iFrameTop < WindowScroll + 20
				needScrollDown = (elementBottom*scale) + iFrameTop > WindowScroll + WindowHeight - 20;

				if (needScrollUp) {
					$(window.parent).scrollTop(WindowScroll - 20);
					if ($(window.parent)['scrollTop']() != WindowScroll) {
						tp = parseFloat(draggableElem.css('top')) - (10*scale);
						draggableElem.css('top', tp+'px');
					}
				} else if (needScrollDown) {
					$(window.parent).scrollTop(WindowScroll + 20);
					if ($(window.parent)['scrollTop']() != WindowScroll) {
						tp = parseFloat(draggableElem.css('top')) + (10*scale);
						draggableElem.css('top', tp+'px');
					}
				}
			}
		}, 50);

	// icCreatePlayer
}

quizTemplates.loadSavedLocalState = function () {
	var savedStateObject = JSON.parse(localStorage.getItem(quizTemplates.quizId));
    if ((quizTemplates.mode == 'sprendimas')) {
        if (savedStateObject && savedStateObject.timestamp > quizTemplates.workingStateTimestamp) {
            quizTemplates.workingState = savedStateObject.state;
            quizTemplates.workingStateTimestamp = savedStateObject.timestamp;
        }
    }
};

quizTemplates.recalculatePageHeight = function() {

	$('.ic_header').parent().parent().css('height', '64px');

	lastItem = $('.ic_levelItem:last').prev();

    //console.log('recalculating page height', quizTemplates.mode, $('.ic_page').width(), lastItem.length);

    if (lastItem.length) {
        if ($('.ic_page').width() == 1140) {
        	if ((quizTemplates.mode === 'perziura') && ($('.addon_Paragraph').length) ) {
                addMargin = 650;
			} else {
                addMargin = 100;
            }
        } else {
            if ((quizTemplates.mode === 'perziura') && ($('.addon_Paragraph').length) ) {
                addMargin = 650;
            } else {
                addMargin = 100;
            }
        }
        PageHeight = lastItem.position().top + lastItem.outerHeight() + addMargin;

        $('.ic_page').css('height', PageHeight + 'px');
        $('.ic_page').parent().css('height', (PageHeight) + 'px');

    } else if (((quizTemplates.mode == 'sprendimas') || (quizTemplates.mode == 'demonstracija')) && ($('.ic_page').width() < 1140)) {

        if ($('#Paragraph1').length) {
            lastItem = $('#Paragraph1');
            addMargin = 95;
        } else {
            lastItem = $('.addon_Advanced_Connector');
            addMargin = 95;
        }
        PageHeight = lastItem.position().top + lastItem.outerHeight() + addMargin;

        $('.ic_page').parent().css('height', (PageHeight + 62) + 'px');
        $('.ic_page').css('height', PageHeight + 'px');
        $('#scrollableBody').parent().css('height', (PageHeight + 62) + 'px');

    } else if (((quizTemplates.mode == 'sprendimas') || (quizTemplates.mode == 'demonstracija')) && ($('.ic_page').width() >= 1140)) {

        if ($('#Paragraph1').length) {
            lastItem = $('#Paragraph1');
            addMargin = 160;

            PageHeight = lastItem.position().top + lastItem.outerHeight() + addMargin;

            //console.log('3. PageHeight', PageHeight);
            $('.ic_page').parent().css('height', (PageHeight + 62) + 'px');
            $('.ic_page').css('height', PageHeight + 'px');

            $('#scrollableBody').parent().css('height', (PageHeight + 62) + 'px');

        } else {
            lastItem = $('.addon_Advanced_Connector');
            addMargin = 130;

            PageHeight = lastItem.position().top + lastItem.outerHeight() + addMargin;

            //console.log('3. PageHeight', PageHeight);
            $('.ic_page').parent().css('height', PageHeight + 'px');
            $('.ic_page').css('height', PageHeight + 'px');

            $('#scrollableBody').parent().css('height', PageHeight + 'px');
        }

    }

    setTimeout(function () {quizPageLoaded = true;}, 1000);
}

quizTemplates.sendStatistics = function(last, state, results) {

	if (last == undefined) {
		last = false;
	}

	var currentSeconds = +new Date;
	currentSeconds = Math.round(currentSeconds / 1000)

	try {
		if ((currentSeconds-quizTemplates.pageloadedTime >= 5) || (quizTemplates.accessedPageIDs.indexOf(quizTemplates.currentPage) > -1)) {
			player.forceScoreUpdate();
			var utils = new PlayerUtils(player);
			var maxPoints = null;
			score = utils.scoreService.getPageScoreById(quizTemplates.currentPage + '');
			if (quizTemplates.points != undefined) {
				maxPoints = quizTemplates.points[quizTemplates.ids.indexOf(quizTemplates.currentPage)];
				var ScoreInPoints = quizTemplates.percentToPoints(score.score, score.errorCount, score.maxScore, maxPoints);
			} else {
				maxPoints = null;
				var ScoreInPoints = null;
			}
			console.log('calling statistics callback with last = ', last);
			if (currentSeconds - quizTemplates.pageloadedTime > 0) {
				quizTemplates.statisticsCallback(quizTemplates.currentPage + '', currentSeconds - quizTemplates.pageloadedTime, quizTemplates.accessedPageIDs.indexOf(quizTemplates.currentPage) > -1, ScoreInPoints, maxPoints, last, state, results);
			}
		}
	} catch (e) {
	}
}


quizTemplates.process_timed = function(divId) {

	$('.mauthor-iframe-wrap-inner', window.parent.document).find('#mauthor-iframe').css('position', 'absolute');
	$('.mauthor-iframe-wrap-inner', window.parent.document).find('#mauthor-iframe-1').css('position', 'absolute');

	$('.quizDiv').keyup(function() {
		$('input').each(function() {

			val = $(this).val();
			val = val.replace(/(\d(\s+))*\d/gm, function(match) {
				return match.replace(/ /g, '');
			});

			$(this).val(val);
		})
	});

    quizPageLoaded = false;

	//$('.quizDiv').css('height', '1200px');
	$('.students-list .student-content').css('display', 'block');

  //if (window.location.href.indexOf('eduka.lt') > 0)	{
  //	  quizTemplates.quizId = window.location.href.split('/')[6];
  //}

  if (quizTemplates.dataType == 'xml') {
    $('head').append('<script type="text/javascript" src="'+quizTemplates.workingDir+'jquery-ui/jquery.ui.touch-punch.js"></script>');
  }

  if ((quizTemplates.dataType == 'json') || (quizTemplates.dataType == 'xml')) {
	  $('body').append('<script type="text/javascript" src="'+quizTemplates.workingDir+'node_modules/angular-touch/angular-touch.min.js"></script>');

	  $('.quizDiv modal-dialogiseiti .message').html('Atlikai ne visas užduotis!');
	  $('.quizDiv modal-dialogiseiti p:first').html('Atliktos užduotys bus išsaugotos, likusias galėsi atlikti vėliau.');
	  $('.quizDiv modal-dialogiseiti p:last').html('Grįžti ir pabaigti pradėtą darbą.');
	  $('.quizDiv modal-dialogiseiti .primary').html('Tęsti');
	  $('.quizDiv modal-dialogiseiti .secondary').html('Baigti');

	  setTimeout(function() {$('.white.error .message').html('Dar nebaigei atlikti visų užduočių.');}, 0);


	  setTimeout(function() {$('.quizDiv').addClass(quizTemplates.mode);}, 0);
	  setTimeout(function() {$('.quizDiv').addClass(quizTemplates.dataType);}, 0);

	  if ($('.spausdinimas').length) {
		   setTimeout(function() {quizTemplates.printCallback();}, 0);
	  }
  }

  $('.navbar-nav').removeClass('nav');
	if (quizTemplates.mode == 'iliustra') {
		quizTemplates.dataUrl = quizTemplates.parseData(['displaymenu', true])['dataURL'];
	}

	if (quizTemplates.dataType == 'json') {
		quizTemplates.allData = JSON.parse(getRemote(quizTemplates.dataUrl));
		for (dd in quizTemplates.allData.data) {
			quizTemplates.questionLevels[quizTemplates.allData.data[dd].json.id] = quizTemplates.allData.data[dd].json.level;
		}

	} else if (quizTemplates.dataType == 'xml') {
		data = getRemote(quizTemplates.dataUrl);
		dom = parseXml(data);
		quizTemplates.dom = dom;

		quizTemplates.allData.data = new Array();

		//if (quizTemplates.mode == 'sprendimas') {
		//	$('.quizDiv').append('<form name="QuizUpload" id="QuizUpload" method="post" action="file-upload-1.htm" name="submit" enctype="multipart/form-data"></form>');
		//}

		for (k=0; k<dom.childNodes[0].childNodes.length;k++) {
			if (dom.childNodes[0].childNodes[k].childNodes.length > 0) {
				ilid = dom.childNodes[0].childNodes[k].getElementsByTagName('ilid');
				type = dom.childNodes[0].childNodes[k].getElementsByTagName('type');
				level = dom.childNodes[0].childNodes[k].getElementsByTagName('level');

				//for (i=0;i<ilid.length;i++) {
					ilidV = ilid[0].childNodes[0].nodeValue;
					typeV = type[0].childNodes[0].nodeValue;
					levelV = level[0].childNodes[0].nodeValue;
					var instance = {json: {name: 'tpl-'+ilidV+'-'+typeV, id: ilidV, template: 'partials/pe'+typeV+'/view.html', level:levelV}};
					quizTemplates.questionLevels[ilidV] = levelV;
					quizTemplates.allData.data.push(instance);
					quizTemplates.setResults(ilidV, false, false, true);
				//}
			}
		}

		if (localStorage.getItem(quizTemplates.quizId+'-saved') == null) {
			for (k=0; k<dom.childNodes[0].childNodes.length;k++) {
				if (dom.childNodes[0].childNodes[k].childNodes.length > 0) {
					ilid = dom.childNodes[0].childNodes[k].getElementsByTagName('ilid');
					ilidV = ilid[0].childNodes[0].nodeValue;
					quizTemplates.setDone(ilidV, 'undone');
				}
			}
		}

	}

	if ((quizTemplates.results != '{}') && (quizTemplates.results != '')) {
		quizTemplates._results = JSON.parse(quizTemplates.results);
	} else {
		if ((quizTemplates.mode == 'sprendimas') && (quizTemplates.quizId > 0)) {
			if ((localStorage.getItem(quizTemplates.quizId+'-saved') != null) && (localStorage.getItem(quizTemplates.quizId+'-res') != null)) {
				quizTemplates._results = JSON.parse(localStorage.getItem(quizTemplates.quizId+'-rezults'));
			}
		}
	}

	if ((quizTemplates.workingState == '{}') || ((quizTemplates.dataType == 'json') && (quizTemplates.mode == 'sprendimas'))){
		if ((quizTemplates.mode == 'sprendimas') && (quizTemplates.quizId > 0)) {
			if ((localStorage.getItem(quizTemplates.quizId+'-saved') != null) && (localStorage.getItem(quizTemplates.quizId+'-res') != null)) {
				quizTemplates.state = JSON.parse(localStorage.getItem(quizTemplates.quizId+'-data'));
			}
		}
	} else {
		if ((quizTemplates.workingState != '') && (quizTemplates.dataType != 'mAuthor')) {
			quizTemplates.state = JSON.parse(quizTemplates.workingState);
		}
	}

	if (quizTemplates.atached != '') {
		quizTemplates._atached = JSON.parse(quizTemplates.atached);
	} else {
		quizTemplates._atached = '';
	}

	if (quizTemplates.aggResults != '') {
		quizTemplates._aggResults = JSON.parse(quizTemplates.aggResults);
	} else {
		quizTemplates._aggResults = '';
	}

	for (key in quizTemplates.allData.data) {
		if (quizTemplates.state[quizTemplates.allData.data[key].json.id] == undefined) {
			quizTemplates.state[quizTemplates.allData.data[key].json.id] = {'done': 'undone'};
		}
	}

	if (quizTemplates.dataType == 'mAuthor') {
		quizTemplates.loadSavedLocalState();

		if (quizTemplates.mode == 'priskyrimas-uzrakinta') {
			$('.quizDiv').addClass('priskyrimas-uzrakinta');
		}

		if (quizTemplates.divId != '') {
			$('#'+quizTemplates.divId).html('');
		}
		if (divId != '') {
			$('#'+divId).html('<div id="_icplayer" class="no-margin pull-left"></div><div class="clear"></div>');
		}
		quizTemplates.divId = divId;

		if ($('.quizDiv #scrollableBody').length == 0) {
			$('.quizDiv').html('<div id="scrollableBody"><div id="_icplayer" class="no-margin pull-left"></div><div class="clear"></div></div>');
		}

		player = icCreatePlayer('_icplayer');
		player.setConfig({workInCheckMode : true});

		var myregexp = new RegExp('NaN','g');
		quizTemplates.workingState = quizTemplates.workingState.replace(myregexp, '0');

		if ((quizTemplates.workingState != '') && (quizTemplates.workingState != '{}' )) {

            parsedState = JSON.parse(quizTemplates.workingState);
            if ( parsedState.state != null ) {
                parsedState.state = restoreWorkingState(parsedState.state);
                quizTemplates.workingState = JSON.stringify(parsedState);
            }

            if (quizTemplates.aggmAuthorResults == true) {

				for (id in quizTemplates.ids) {

					if ((quizTemplates.ids[id] == 100) || (quizTemplates.ids[id] == 1000) || (quizTemplates.ids[id] == 10000)) {
						var myregexp = new RegExp('"'+quizTemplates.ids[id]+'([a-zA-Z])','g');
						quizTemplates.workingState = quizTemplates.workingState.replace(myregexp, '"res'+quizTemplates.ids[id]+'$1');
					} else {
						var myregexp = new RegExp('"'+quizTemplates.ids[id],'g');
						quizTemplates.workingState = quizTemplates.workingState.replace(myregexp, '"res'+quizTemplates.ids[id]);
					}

					var myregexp2 = new RegExp('\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Source_list'+quizTemplates.ids[id],'g');
					quizTemplates.workingState = quizTemplates.workingState.replace(myregexp2, '\\\\\\\\\\\\\\"'+quizTemplates.ids[id]+'Source_list'+quizTemplates.ids[id]);

					/* KaÅ¾koks durnas hack, bet kolkas tegu lieka */
					/*
					if (   (quizTemplates.ids[id] == 15868)
					    || (quizTemplates.ids[id] == 16185)
					    || (quizTemplates.ids[id] == 16205)
					    || (quizTemplates.ids[id] == 16184)
					    || (quizTemplates.ids[id] == 16254)
					    || (quizTemplates.ids[id] == 16218)
					    || (quizTemplates.ids[id] == 16261)
					    || (quizTemplates.ids[id] == 16264)

					    //|| (quizTemplates.ids[id] == 16188)
					    ) {
							*/
						var myregexp2 = new RegExp('\\\\\\"Source_list'+quizTemplates.ids[id],'g');
						quizTemplates.workingState = quizTemplates.workingState.replace(myregexp2, '\\\"'+quizTemplates.ids[id]+'Source_list'+quizTemplates.ids[id]);
					//}

					var myregexp2 = new RegExp('"Image_sourcea'+quizTemplates.ids[id],'g');
					quizTemplates.workingState = quizTemplates.workingState.replace(myregexp2, '"'+quizTemplates.ids[id]+'Image_sourcea'+quizTemplates.ids[id]);

					var myregexp2 = new RegExp('"'+quizTemplates.ids[id]+'Image_sourcea'+quizTemplates.ids[id]+'a10','g');
					quizTemplates.workingState = quizTemplates.workingState.replace(myregexp2, '"'+quizTemplates.ids[id]+quizTemplates.ids[id]+'Image_sourcea'+quizTemplates.ids[id]+'a10');

					var myregexp2 = new RegExp('"'+quizTemplates.ids[id]+'Image_sourcea'+quizTemplates.ids[id]+'a11','g');
					quizTemplates.workingState = quizTemplates.workingState.replace(myregexp2, '"'+quizTemplates.ids[id]+quizTemplates.ids[id]+'Image_sourcea'+quizTemplates.ids[id]+'a11');

					var myregexp2 = new RegExp('"'+quizTemplates.ids[id]+'Image_sourcea'+quizTemplates.ids[id]+'a12','g');
					quizTemplates.workingState = quizTemplates.workingState.replace(myregexp2, '"'+quizTemplates.ids[id]+quizTemplates.ids[id]+'Image_sourcea'+quizTemplates.ids[id]+'a12');


					var myregexp2 = new RegExp('"res'+quizTemplates.ids[id]+'Image_sourcea'+quizTemplates.ids[id]+'a10','g');
					quizTemplates.workingState = quizTemplates.workingState.replace(myregexp2, '"res'+quizTemplates.ids[id]+quizTemplates.ids[id]+'Image_sourcea'+quizTemplates.ids[id]+'a10');

					var myregexp2 = new RegExp('"res'+quizTemplates.ids[id]+'Image_sourcea'+quizTemplates.ids[id]+'a11','g');
					quizTemplates.workingState = quizTemplates.workingState.replace(myregexp2, '"res'+quizTemplates.ids[id]+quizTemplates.ids[id]+'Image_sourcea'+quizTemplates.ids[id]+'a11');

					var myregexp2 = new RegExp('"res'+quizTemplates.ids[id]+'Image_sourcea'+quizTemplates.ids[id]+'a12','g');
					quizTemplates.workingState = quizTemplates.workingState.replace(myregexp2, '"res'+quizTemplates.ids[id]+quizTemplates.ids[id]+'Image_sourcea'+quizTemplates.ids[id]+'a12');

					var myregexp2 = new RegExp('"res'+quizTemplates.ids[id]+'multiplegap10','g');
					quizTemplates.workingState = quizTemplates.workingState.replace(myregexp2, '"res'+quizTemplates.ids[id]+quizTemplates.ids[id]+'multiplegap10');

					var myregexp2 = new RegExp('"res'+quizTemplates.ids[id]+'multiplegap11','g');
					quizTemplates.workingState = quizTemplates.workingState.replace(myregexp2, '"res'+quizTemplates.ids[id]+quizTemplates.ids[id]+'multiplegap11');

					var myregexp2 = new RegExp('"res'+quizTemplates.ids[id]+'multiplegap12','g');
					quizTemplates.workingState = quizTemplates.workingState.replace(myregexp2, '"res'+quizTemplates.ids[id]+quizTemplates.ids[id]+'multiplegap12');

					var myregexp2 = new RegExp('"res'+quizTemplates.ids[id]+'multiplegap13','g');
					quizTemplates.workingState = quizTemplates.workingState.replace(myregexp2, '"res'+quizTemplates.ids[id]+quizTemplates.ids[id]+'multiplegap13');

					var myregexp2 = new RegExp('"res'+quizTemplates.ids[id]+'multiplegap14','g');
					quizTemplates.workingState = quizTemplates.workingState.replace(myregexp2, '"res'+quizTemplates.ids[id]+quizTemplates.ids[id]+'multiplegap14');

					var myregexp2 = new RegExp('"res'+quizTemplates.ids[id]+'multiplegap15','g');
					quizTemplates.workingState = quizTemplates.workingState.replace(myregexp2, '"res'+quizTemplates.ids[id]+quizTemplates.ids[id]+'multiplegap15');
                }

				/******************************************************/

				const regex = /res([0-9]+)Source_list([0-9]+)_/g;
				let m;

				str = quizTemplates.workingState;
				while ((m = regex.exec(str)) !== null) {
					// This is necessary to avoid infinite loops with zero-width matches
					if (m.index === regex.lastIndex) {
						regex.lastIndex++;
					}

					// The result can be accessed through the `m`-variable.

					m.forEach( function(match, groupIndex){
					//m.forEach((match, groupIndex) => {
						//console.log(`Found match, group ${groupIndex}: ${match}`);

						if (groupIndex == 1) {
							idd = match;
						}

						if (groupIndex == 2) {
							var myregexp2 = new RegExp('\\\\\\\\\\\\\\\\\\\\\\\\\\\\"Source_list'+match+'_','g');
							quizTemplates.workingState = quizTemplates.workingState.replace(myregexp2, '\\\\\\\\\\\\\\"'+idd+'Source_list'+match+'_');
						}
					});
				}

				/* Dar vienas durnas hack'as */
				//quizTemplates.workingState = quizTemplates.workingState.replace('Source_list16188-1', '16188Source_list16188-1');
				//quizTemplates.workingState = quizTemplates.workingState.replace('Source_list16188-8', '16188Source_list16188-8');

				/******************************************************/
				//console.log(JSON.parse(quizTemplates.workingState).state);


				quizTemplates.workingState = quizTemplates.workingState.replace(/currentFrame\\\\\\":\\\\\\"\d/gm, 'currentFrame\\\\\\":\\\\\\"0');

				if (quizTemplates.mode == 'perziura') {
					if (quizTemplates.results != '') {
						var res = JSON.parse(quizTemplates.results);
					} else {
						var res = JSON.parse(quizTemplates.aggResults)[quizTemplates.divId];
					}

					if (res.wstate != undefined) {
						quizTemplates.workingState = res.wstate;
					}
				}
			}

			st = JSON.parse(quizTemplates.workingState);

            if (st.accessed) {
                if (st.accessed.indexOf('\"') > -1) {
                    quizTemplates.accessedPageIDs = JSON.parse(st.accessed);
                } else {
                    quizTemplates.accessedPageIDs = st.accessed;
                }
            }

			if (quizTemplates.accessedPageIDs == '[]') {
				quizTemplates.accessedPageIDs = [];
			}

			if (st.time) {
				st.time = st.time.replace(/res/g, '');
			}

			if (st.time != undefined) {
				quizTemplates.quizTimes = JSON.parse(JSON.parse(st.time).pages_times);
				quizTemplates.workingState = JSON.stringify(st);
			}


			if (quizTemplates.workingState != '[]') {
				player.setState(quizTemplates.workingState);
			}
		}

		player.onStatusChanged( function () {
				if (quizTemplates.mode == 'sprendimas') {
					quizTemplates.mAuthorCheck(false, false);
				}
			});

		var firstPageLoaded = false;
		var orientationChangeHandlerAdded = false;
		var debounceTimeoutID = null;
		var currentScore = 0;

		quizTemplates.maPlayer = player;

		player.onPageLoaded (function onPageLoadedHandler() {

			clearTimeout(quizTemplates.statiticsTimeout);
			clearTimeout(quizTemplates.statiticsTimeout);
			if (window.parent.location.href.indexOf('admin') == -1) {
				if (quizTemplates.mode != 'perziura') {
					quizTemplates.mAuthorCheck(false, false);
				}
			} else {
				$('#mauthor-iframe-loader', window.parent.document).css('display', 'none');
			}

			quizTemplates.pageloadedTime = +new Date
			quizTemplates.pageloadedTime = Math.round(quizTemplates.pageloadedTime / 1000);

			quizTemplates.prevPage = quizTemplates.currentPage;
			quizTemplates.currentPage = $('.ic_page').attr('id');

			if ((quizTemplates.mode == 'sprendimas') || (quizTemplates.mode == 'demonstracija')) {
				quizTemplates.statiticsTimeout = setTimeout(function () {
					quizTemplates.mAuthorCheck(false, false);
				}, 5000);
			}

			quizTemplates.paragraphVisible = false;
            quizTemplates.youtubeVisible = false;

			if (quizTemplates.mode == 'demonstracija') {
				$('#Reset1').css('display', 'none');
			}

			quizTemplates.hackSelectHtmlEntities('')

			$('span.notion').each(function(){ $(this).click(function() { ui = $(this); quizTemplates.notionClick(ui); }); });

			quizTemplates.reprocessHrefs('.ic_page');
			quizTemplates.reprocessPopup('.ic_page');


		    $('input').each(function() {

					$(this).blur(function() {
						if (quizTemplates.accessedPageIDs.indexOf($('.ic_page').attr('id')) == -1) {
							quizTemplates.accessedPageIDs.push($('.ic_page').attr('id'));
						}
					});

					$(this).keyup(function() {

						if (quizTemplates.accessedPageIDs.indexOf($('.ic_page').attr('id')) == -1) {
							quizTemplates.accessedPageIDs.push($('.ic_page').attr('id'));
						}

					    regex = /[^0-9a-žA-Ž,.;\/'\*:“„"'`!?<>\-_()%+=÷×•^°πа-яА-ЯёЁ ]/gm;
					    val = $(this).val();
					    val = val.replace(regex, '');

						val = val.replace(/(\d(\s+))*\d/gm, function(match) {
								return match.replace(/ /g, '');
							});

                        $(this).val(val);

                        var patt = new RegExp("[а-яА-Я]");
                        text = $(this).closest('.text_questionBody, .addon_Table').text();
						if ((patt.test(text)) && (!$(this).closest('.text_questionBody, .addon_Table').hasClass('force_lt'))) {

							val = $(this).val();
							val = val.replace(/y/gm, 'у');
                            val = val.replace(/e/gm, 'е');
                            val = val.replace(/a/gm, 'а');
							val = val.replace(/o/gm, 'о');

							val = val.replace(/Y/gm, 'У');
							val = val.replace(/E/gm, 'Е');
							val = val.replace(/A/gm, 'А');
							val = val.replace(/O/gm, 'О');

							val = val.replace(/x/gm, 'х');
							val = val.replace(/p/gm, 'р');
							val = val.replace(/c/gm, 'с');

							val = val.replace(/K/gm, 'К');
							val = val.replace(/H/gm, 'Н');
							val = val.replace(/X/gm, 'Х');
							val = val.replace(/B/gm, 'В');
							val = val.replace(/P/gm, 'Р');
							val = val.replace(/C/gm, 'С');
							val = val.replace(/M/gm, 'М');
                            val = val.replace(/T/gm, 'Т');

                            $(this).val(val);
						} else {

                            val = $(this).val();
                            val = val.replace(/у/gm, 'y');
                            val = val.replace(/е/gm, 'e');
                            val = val.replace(/а/gm, 'a');
                            val = val.replace(/о/gm, 'o');

                            val = val.replace(/У/gm, 'Y');
                            val = val.replace(/Е/gm, 'E');
                            val = val.replace(/А/gm, 'A');
                            val = val.replace(/О/gm, 'O');

                            val = val.replace(/х/gm, 'x');
                            val = val.replace(/р/gm, 'p');
                            val = val.replace(/с/gm, 'c');

                            val = val.replace(/К/gm, 'K');
                            val = val.replace(/Н/gm, 'H');
                            val = val.replace(/Х/gm, 'X');
                            val = val.replace(/В/gm, 'B');
                            val = val.replace(/Р/gm, 'P');
                            val = val.replace(/С/gm, 'C');
                            val = val.replace(/М/gm, 'M');
                            val = val.replace(/Т/gm, 'T');

                            $(this).val(val);

						}

                    });
				});


            clearInterval(quizTemplates.repaintIntervalId);
            clearTimeout(quizTemplates.mathjaxDoneTimerId);
			//console.log('%cPage loaded, starting postprocess', 'color: blue');

			/*
			MathJax.Hub.Startup.signal.Interest(
                function (message) {
                    console.log("Startup: "+message)
                }
            );

			/*
            MathJax.Hub.signal.Interest(
                function (message) {
                	console.log("Hub: "+message)
                }
            );

            MathJax.Hub.Register.MessageHook("Math Processing Error",function (message) {
                console.log('error:', message);
            });

            */

            quizTemplates.hackProcessed = false;

			quizPageLoaded = true;

			quizTemplates.pagaLoaded = true;
			start = start || new Date().getTime();

			if (!firstPageLoaded) {
				semiResponsiveLayoutChooser = new window.semiResponsive.LayoutChooser(player.getSemiResponsiveLayouts());
				var screenSizes = window.mAuthor.ScreenUtils.getScreenSizesDependingOnOrientation(userAgent);

				//var layoutID = chooseLayout(semiResponsiveLayoutChooser, screenSizes);
				//console.log(layoutID);
				//'256F89BF-B785-4E15-B19D-FAB7C58F0376'
				//'default'

				if ($('.container .choosen-task-details', window.parent.document).width() >= 600) {
					player.changeLayout('default');
				} else {
					// player.changeLayout('default');
					player.changeLayout('256F89BF-B785-4E15-B19D-FAB7C58F0376');
				}

                    firstPageLoaded = true;
					//window.addEventListener("resize", onResizeHandler, false)
                }

                iframeResizeRequest();
                postPageLoadedMessage();

            if (quizTemplates.mode == 'perziura') {

					if ($('.amokytoj').length) {

						$('#Show_Answers1').css('display' ,'none');

						lastItem = $('.ic_text.amokytoj:last');

						if ($('.ic_page').width() == 1140) {
							addMargin = 120;
						} else {
							addMargin = 220;
						}

						if (quizTemplates.openEvaluation == true) { addMargin = addMargin + 30; }

						PageHeight = lastItem.position().top  + lastItem.outerHeight() + addMargin;

						//console.log('PageHeight', PageHeight);
						$('.ic_page').parent().css('height', (PageHeight+62)+'px');
						$('.ic_page').css('height', PageHeight+'px');

						$('#scrollableBody').parent().css('height', (PageHeight+62)+'px');

					}
				}

			$("#scrollableBody").css({
				"overflow": "",
				"height": ""
			});

			// event bus handlers are cleared on each page change, so they should be set on each page load
			var valueChangedHandler = {
				onEventReceived: function() {
					/*
                    var utils = new PlayerUtils(player);
                    var presentation = utils.getPresentation();
                    var newScoreValue = utils.getPresentationScore(presentation).scaledScore;

                    // if score changed send now
                    if (newScoreValue != currentScore) {
                        sendSCORMScore(false);
                        window.clearTimeout(debounceTimeoutID);
                        debounceTimeoutID = null;
                        currentScore = newScoreValue;
                    } else {
                        // update 30 seconds after event came
                        if (debounceTimeoutID === null) {
                            debounceTimeoutID = window.setTimeout(function () {
                                sendSCORMScore(false);
                                debounceTimeoutID = null;
                            }, 30000);
                        }
                    }

                    */
				}
			};
			var playerEventBus = player.getPlayerServices().getEventBus();
			playerEventBus.addEventListener('ValueChanged', valueChangedHandler);

			(function () {
				var scrollDetectorInterval = null;
				var retries = 0;

				function scrollAddIfBodyBiggerThanWindow () {
					var $window = $(window);
					var $icplayerDiv = $("#_icplayer");
					var $scrollableContent = $("#scrollableBody");

					var windowHeight = $window.height();
					var windowWidth = $window.width();

					var bodyHeight = $icplayerDiv.height();
					var bodyWidth = $icplayerDiv.width();

					if (windowHeight < bodyHeight || windowWidth < bodyWidth) {
						$scrollableContent.css("overflow", "auto");
						$scrollableContent.height(windowHeight);
					} else if (windowHeight >= bodyHeight && windowWidth >=  bodyWidth) {
						$scrollableContent.css("height", "");
						$scrollableContent.css("overflow", "");
					} else if (windowHeight >= bodyHeight) {
						$scrollableContent.css("height", "");
					}

					retries++;
					if (retries > 5) {
						window.clearInterval(scrollDetectorInterval);
					}
				}

				$(document).ready(function () {
					if (scrollDetectorInterval == null) {
						scrollDetectorInterval = setInterval(scrollAddIfBodyBiggerThanWindow, 1000);
					}
				});

				if (!orientationChangeHandlerAdded) {
					orientationChangeHandlerAdded = true;
					// when orientation changes there is a need to set scrollableContent height again
					window.addEventListener('orientationchange', function() {
						// values of window height/width may not be updated immediately after orientation change
						setTimeout(scrollAddIfBodyBiggerThanWindow, 1000);
					});
				}
			})();

			$('.ic_choice .html-face').bind('touchstart touchend', function(event) {event.stopPropagation(); });

			$('.text_questionlevel').css({'text-align':'left', 'font-size':'14px'});

            $('.ic_page').children().each(function () {
                if (($(this).hasClass('ic_text')) && (!$(this).hasClass('ic_levelItem'))) {
                	var cssHeight = $(this).outerHeight();
					$(this).attr('cssHeight', cssHeight);
                }
            });


			MathJax.Hub.Queue(function () {
				$('.MathJax_Error').each(function() {

					math = $(this).next().html();

					$(this).prev().remove();
					$(this).next().remove();
					$(this).replaceWith('\\('+math+'\\)');

					MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
				});
			});
			if ($('.addon_Paragraph').length) { quizTemplates.mathProcessed = true; }

			//console.log('math process registered', quizTemplates.mathProcessed);
            //quizTemplates.mathProcessed = true;

			if (quizTemplates.mathProcessed == false) {
				//console.log('%cRegistering end process', 'color: blue');

                quizTemplates.mathJaxHook = MathJax.Hub.Register.MessageHook("End Process", function () {
                    quizTemplates.DOMChangeListenerRegistered = false;
                    //console.log('%cMathjax ended succesfully...', 'color: red');
                    clearTimeout(quizTemplates.reporcessHeightsId);
                	clearTimeout(quizTemplates.mathjaxDoneTimerId);
                	quizTemplates.mathProcessed = true;
                    quizTemplates.mathjaxDoneTimerId = setTimeout(function () {
                        	quizTemplates.ReprocessHeights(true, false);
                    	}, 10);

                });

                quizTemplates.mathProcessed = true;

            }


			//if (((quizTemplates.mode == 'priskyrimas-uzrakinta') || (quizTemplates.mode == 'priskyrimas')) && (quizTemplates.evalType == 'points')) { //change for bandomieji
			/*
                $('#TextEasy').css('display', 'none');
                $('#TextMedium').css('display', 'none');
                $('#TextHard').css('display', 'none');

                $('#SelectEasy').css('display', 'none');
                $('#SelectMedium').css('display', 'none');
                $('#SelectHard').css('display', 'none');

                $('.addon_Double_State_Button').css('display', 'none');

                $('#TextShowAnsvers').css('left', '90px');
                $('#Show_Answers1').css('left', 254);

            }


				if ((quizTemplates.mode == 'priskyrimas-uzrakinta') && (quizTemplates.evalType == 'points')) {
					$('.text_questionlevel').each(function(){
							idd = $(this).attr('id').split('-')[0];
							val = $('[id*="points-'+idd+'"]').html();
							$(this).html('Užduoties vertė: ' + val);
						});
				}
				*/

				$('.ic_gap').attr('autocomplete', 'off').attr('autocorrect', 'off').attr('autocapitalize', 'off').attr('spellcheck', 'off');

				if (((quizTemplates.mode == 'priskyrimas') || (quizTemplates.mode == 'priskyrimas-uzrakinta')) && ((quizTemplates.evalType == 'points') || (quizTemplates.points != undefined))) {

					idk = 0;
					$(".addon_Double_State_Button[id*='itm']").each(function() {

							idd = $(this).attr('id').replace('itm-', '');
                        	tp = $(this).css('top');
							if (quizTemplates.points != undefined) {
								maxPoints = quizTemplates.points[quizTemplates.ids.indexOf(idd)];


								if (maxPoints > 0) {
									$('<div class="eval-points-wrp"><div class="eval-points-val eval-priskyrimas">'+maxPoints+'</div><div class="eval-points-txt">'+quizTemplates.pointsLitteral(maxPoints)+'</div></div>').insertAfter(this).css('top', tp);
								} else {
									$('<div class="eval-points-wrp"><div class="eval-points-val eval-priskyrimas eval-nevertinamas">'+maxPoints+'</div><div class="eval-points-txt">Nevertinama</div></div>').insertAfter(this).css('top', tp);
								}
							}

							sidd = idd.indexOf('SVS')>=0 ? "'"+idd+"'":idd;
                        $('<div class="report_error" onclick="quizTemplates.reportError('+sidd+', additionalInfo)">!</div>').insertAfter(this).css('top', tp);

							idk++;

						});
				}

				if ((quizTemplates.mode == 'perziura') && (quizTemplates.evalType == 'points')) {

					$('.addon_Double_State_Button').each(function() {

							idd = $(this).attr('id').replace('itm-', '');

							//if ((quizTemplates._results['points'] != undefined) || (quizTemplates._aggResults[quizTemplates.mokId]['points'] != undefined)) {
								maxPoints = quizTemplates.points[quizTemplates.ids.indexOf(idd)];

								if (quizTemplates._results['points'] != undefined) {
									resPoints = quizTemplates._results['points'][idd];
								} else {
									if (quizTemplates._aggResults[quizTemplates.mokId] != undefined) {
										if (quizTemplates._aggResults[quizTemplates.mokId]['points'] != undefined) {
											resPoints = quizTemplates._aggResults[quizTemplates.mokId]['points'][idd];
										} else {
											resPoints = 0;
										}
									} else {
										resPoints = 0;
									}
								}

								wrongClass = '';
								if (resPoints == 0) {
									wrongClass = 'eval-zero';
								}

								if (maxPoints > 0) {
									$(this).html('<div class="eval-points '+wrongClass+'">'+resPoints+'/'+maxPoints+'</div>').addClass('eval-points-wrp');
								} else {
									if (quizTemplates.quizTimes != undefined) {
										if (quizTemplates.quizTimes[parseInt(idd)] > 0) {
											$(this).html('<div class="eval-points-val eval-priskyrimas eval-perziureta">'+maxPoints+'</div><div class="eval-points-txt">Peržiūrėta</div>').addClass('eval-points-wrp');
										} else {
											$(this).html('<div class="eval-points-val eval-priskyrimas eval-neperziureta">'+maxPoints+'</div><div class="eval-points-txt">Neperžiūrėta</div>').addClass('eval-points-wrp');
										}
									} else {
										$(this).html('<div class="eval-points-val eval-priskyrimas eval-neperziureta">'+maxPoints+'</div><div class="eval-points-txt">Neperžiūrėta</div>').addClass('eval-points-wrp');
									}
								}
								$('#status-false-'+idd).css('display', 'none');
								$('#status-true-'+idd).css('display', 'none');

								if ($('#'+idd+'Vertinimas').length) {
									if ($('#'+idd+'Vertinimas').find('#points').attr('val') == '-') {
										$(this).find('.eval-points').html('Neįvertinta').addClass('ne-vertinta-copy');
									}
								}
							//}

                        tp = $(this).css('top');
						sidd = idd.indexOf('SVS')>=0 ? "'"+idd+"'":idd;
						$('<div class="report_error" onclick="quizTemplates.reportError('+sidd+', additionalInfo)">!</div>').insertAfter(this).css('top', tp);

						/*
                        if (quizTemplates._results['points'] != undefined) {
                            $(this).html('<div class="st-mark-val">'+quizTemplates._results['points'][idd]+'</div><div class="st-mark-text">'+quizTemplates.pointsLitteral(quizTemplates._results['points'][idd])+'</div>');
                        } else {
                            if (quizTemplates._aggResults[quizTemplates.mokId]['points'] != undefined) {
                                $(this).html('<div class="st-mark-val">'+quizTemplates._aggResults[quizTemplates.mokId]['points'][idd]+'</div><div class="st-mark-text">'+quizTemplates.pointsLitteral(quizTemplates._aggResults[quizTemplates.mokId]['points'][idd])+'</div>');
                            } else {
                                $(this).html('<div class="st-mark-val">0</div><div class="st-mark-text">taškų</div>');
                            }
                        }
                        $(this).addClass('st-mark');

                        $('#status-false-'+idd).css('display', 'none');
                        $('#status-true-'+idd).css('display', 'none');
                        $(this).css('display', 'block');

                        if (quizTemplates._results['points'] != undefined) {
                            $('#'+idd+'-level').html('Užduoties vertė: ' + quizTemplates._results['maxPoints'][idd] + ' '+quizTemplates.pointsLitteral(quizTemplates._results['maxPoints'][idd]));
                        } else {
                            if (quizTemplates._aggResults[quizTemplates.mokId]['maxPoints'] != undefined) {
                                $('#'+idd+'-level').html('Užduoties vertė: ' + quizTemplates._aggResults[quizTemplates.mokId]['maxPoints'][idd] + ' ' + quizTemplates.pointsLitteral(quizTemplates._aggResults[quizTemplates.mokId]['maxPoints'][idd]));
                            } else {
                                $('#'+idd+'-level').html('Užduoties vertė: 0 taškų');
                            }
                        }

                        */
						});
				}

				if ($('.addon_Paragraph').length) {
					$('.report_error').first().addClass('report_error_first');
				}

				if (quizTemplates.edit == null) {
					buttons = '';
				} else {

					if (quizTemplates.disabledEdit == true) {
						EditBtnClass = 'btn btn-secondary button-redagavimas btn-disabled';
						EditBtnClick = '';
					} else {
						EditBtnClass = 'btn btn-secondary button-redagavimas';
						EditBtnClick = 'quizTemplates.editData()';
					}

					buttons = '<div id="edit" class="'+EditBtnClass+'" style="" onclick="'+EditBtnClick+'">REDAGUOTI UŽDUOTIS</div>';
					$('#TextShowAnsvers').addClass('shifted');
					$('#Show_Answers1').addClass('shifted');
                    $('.quizDiv .ic_page').prepend(buttons);
				}


				if (($('#itm-15593').length) && (!$('#st-mainText').length)) {
					$('.quizDiv').prepend('<div id="st-mainText" class="text_questionTitle">'+quizHackText+'</div>');
					$('.quizDiv').css('background-color', 'white');
				}

				if ((quizTemplates.text != '') && (quizTemplates.text != undefined) && (!$('#st-mainText').length)) {
					$('.quizDiv').prepend('<div id="st-mainText" class="text_questionTitle">'+quizTemplates.text+'</div>');
					$('.quizDiv').css('background-color', 'white');

					$('#AdditionalGarsas audio').on('ended', function() {
							$('#AdditionalGarsas .play-pause-btn').addClass('audio-play-btn').removeClass('audio-pause-btn');
						});

					$('#AdditionalGarsas .play-pause-btn').click(function () {

							if ($(this).hasClass('audio-play-btn')) {
								$(this).addClass('audio-pause-btn').removeClass('audio-play-btn');
								$(this).parent().parent().find('audio')[0].play();
							} else {
								$(this).addClass('audio-play-btn').removeClass('audio-pause-btn');
								$(this).parent().parent().find('audio')[0].pause();
							}

						});
				}

				if ((($('.ic_page').attr('id') == 15593) ||
				     ($('.ic_page').attr('id') == 15595) ||
				     ($('.ic_page').attr('id') == 15596) ||
				     ($('.ic_page').attr('id') == 15597) ||
				     ($('.ic_page').attr('id') == 15598) ||
				     ($('.ic_page').attr('id') == 15599) ||
				     ($('.ic_page').attr('id') == 15600) ||
				     ($('.ic_page').attr('id') == 15601) ||
				     ($('.ic_page').attr('id') == 15602) ||
				     ($('.ic_page').attr('id') == 15603) ||
				     ($('.ic_page').attr('id') == 15604) ||
				     ($('.ic_page').attr('id') == 15605) ||
				     ($('.ic_page').attr('id') == 15606) ||
				     ($('.ic_page').attr('id') == 15607) ||
				     ($('.ic_page').attr('id') == 15608)
				    ) && (quizTemplates.evalType == 'points')) {

						//console.log(quizTemplates.dataUrl)

					if (!$('#st-mainText').length) {
						$('.quizDiv').prepend('<div id="st-mainText" class="text_questionTitle">'+quizHackText+'</div>');
					}
				}


				$('.ui-draggable').bind('mousedown', function(e) { $(this).attr('mtp', e.offsetY) });

			dynamicHeightCalculator.calculateHeights();

			$('#_icplayer')
				.off(CUSTOM_EVENTS.LSS)
				.on(CUSTOM_EVENTS.LSS, function (objectEvent) {
					//('Calculated after saved state', objectEvent);

					$('.ic_page img.ui-draggable').each(function() {
						tp = $(this).attr('orig-tp');
                        $(this).css('top', tp);
					});

					dynamicHeightCalculator.calculateHeights();
				});

			$('.ic_button_reset').click(function () {
				dynamicHeightCalculator.calculateHeights();
			});

			/*
            quizTemplates.reporcessHeightsId = setTimeout(function () {
            		console.log('%cRECALCULATING HEIGHT WITHOUT MATHJAX', 'color: fuchsia');
            		quizTemplates.ReprocessHeights();
            	}, 1000);
            //quizTemplates.recalculatePageHeight();
            */
            quizTemplates.repaintIntervalId = setInterval(function() { quizTemplates.ReprocessHeights(false, true) }, 1000);

			setTimeout(function() {
				if ($('#43193Text1').length > 0) {
					quizTemplates.reloadMathJax();
				}
			}, 500);

            if (!is_touch_device()) {
				$('.report_error').each(function () {
					$(this).hover(function () {
						$(this).addClass('report_error_hover');
					}, function () {
						$(this).removeClass('report_error_hover');
					})
				})
			}

			setTimeout(function() {
				if ($('#43193Text1').length > 0) {
					quizTemplates.reloadMathJax();
				}
			}, 500);

        });

        player.load(quizTemplates.dataUrl);

        if (quizTemplates.mode == 'sprendimas') {
			$('.quizDiv').parent().append('<div class="quizPopWrp"><div class="quizPopBody"><div class="quit" onclick="quizTemplates.goback()"></div><div class="proceed" onclick="quizTemplates.hidepopup()"></div></div></div>');

			$('.quizDiv').parent().append('<form name="QuizUpload" id="QuizUpload" method="post" action="file-upload-1.htm" name="submit" enctype="multipart/form-data"></form>');
			for (qid in quizTemplates.ids) {
				$('#QuizUpload').append('<input name="QuizUploadFile_'+quizTemplates.ids[qid]+'" type="file" id="file-'+quizTemplates.ids[qid]+'" required style="display: none"/>');
			}

		}

		quizTemplates.setInterval();

		// console.log('Prisegti failai', quizTemplates.attachment);

	}
}

quizTemplates.setInterval = function () {

	var iiw = 0;
	icpg = 1;
	pab = 1;
	prnt = 1;

	setInterval(function () {

			if (!quizTemplates.paragraphVisible) {

				$('.addon_Paragraph').each(function () {

					$('body', $(this).find('iframe').contents()).keyup(function() {
                        if (quizTemplates.accessedPageIDs.indexOf($('.ic_page').attr('id')) == -1) {
                            quizTemplates.accessedPageIDs.push($('.ic_page').attr('id'));
                        }

					});

                    $('body', $(this).find('iframe').contents()).bind('paste', function() {
                        if (quizTemplates.accessedPageIDs.indexOf($('.ic_page').attr('id')) == -1) {
                            quizTemplates.accessedPageIDs.push($('.ic_page').attr('id'));
                        }
                    });
				});
			}

			if (!quizTemplates.youtubeVisible) {

				if ($('.addon_YouTube_Addon + #Reset1').length) {

					$youtube = $('.addon_YouTube_Addon + #Reset1').prev().find('iframe');

                    //if ($('video', $youtube.contents()).length) {
                    //    console.log('youtube video found');
                        quizTemplates.youtubeVisible = true;

                        if (quizTemplates.accessedPageIDs.indexOf($('.ic_page').attr('id')) == -1) {
                            quizTemplates.accessedPageIDs.push($('.ic_page').attr('id'));
                        }
                    //}
				}
			}

			$('.ic_gap-empty').each( function() {
					var elem = $(this);
					if (((elem.attr('data-gap-value') == '\\gap{}') || (elem.attr('size') == '0')) && elem.val() == '') {
						elem.addClass('ic_gap-correct');
					} else {
						elem.addClass('ic_gap-wrong');
					}

					elem.removeClass('ic_gap-empty');
				});

			if (icpg) {
				if ($('.demonstracija .ic_page').length) {
					icpg = 0;
					if ((window.location.href.indexOf('beta-klase') > 0) || (window.location.href.indexOf('prod2-klase') > 0) ) {
						ilid = $('.ic_page').attr('id');
						$('#Text1').append('<div id="ilid" style="left: -70px; top: -5px; position: absolute; font-size: 18px">'+ilid+'</div>')
					}
				}
			}

			if ($('#Text1 #ilid').length) {
			} else {
				icpg = 1;
			}

			if (prnt) {
				if ($('.spausdinimas .ic_page').length) {
					prnt = 0;
					setTimeout( function() {
							quizTemplates.reMakePage();
							//quizTemplates.printCallback();
						}, 500);

				}
			}

			if ($('.quizDiv').hasClass('sprendimas')) {
				ptop = $('#Done1').css('top');
				$('#Pabaigti').css('top', ptop);

				if ($('.prideti').length) {
				} else {
					if ($('#Paragraph1').length) {
						Paragraph1 = $('#Paragraph1');
						ilid = $('.ic_page').attr('id');
						if ($('.ic_page').width() == 1140) {
							$('.ic_page').css('padding-bottom', '50px');
						}
						tp = parseInt(Paragraph1.css('top')) + parseInt(Paragraph1.css('height')) + 42;
						$('.ic_page').append('<div class="prideti" style="cursor: pointer; position: absolute; left: 943px; top: '+tp+'px;width: 82px;background: url(/img/icons/attach-file.svg) left center no-repeat;padding-left: 27px;font-size: 14px;color: #2b8dd3;" onclick="$('+"'"+'#file-'+ilid+"'"+').click()">Prisegti failą</div>');

						if ((quizTemplates.sprAtached[ilid] != '') && (quizTemplates.sprAtached[ilid] != undefined)) {
							$('.ic_page').append('<div class="atached" style="cursor: pointer; position: absolute; left: 90px; top: '+tp+'px; width: 394px; font-size: 14px;color: #2b8dd3; background-size: 22px;" onclick="mremoveFile('+"'"+ilid+"'"+')"><span class="fileName">'+quizTemplates.sprAtached[ilid]+'</span><span class="fileSize"> ( '+toKB(quizTemplates.sprAtachedSizes[ilid])+' ) </span><span class="fileRemove">Pašalinti</span></div>');
						}

						$('#file-'+ilid+':not(.processed)').change(
							function(e){
								tp = parseInt(Paragraph1.css('top')) + parseInt(Paragraph1.css('height')) + 42;
								allowedExtentions = ['doc', 'docx', 'xls', 'xlsx', 'ppt', 'pptx',
									'pdf', 'jpg', 'jpeg', 'png', 'gif', 'mp3',
									'flv', 'mp4', 'zip', 'rar', 'mkv', 'swf',
									'mov', 'avi', 'odt', 'rtf', 'txt', 'wma', 'wav',
									'mpg', 'psd', 'nmp', 'html', '7z' ];

								fileExt = e.target.files[0].name.split('.').pop().toLowerCase();
								if  (allowedExtentions.indexOf(fileExt) >= 0) {

									atachedSize = 0;
									for (a in quizTemplates.sprAtachedSizes) {
										if (a !=ilid) {
											atachedSize = quizTemplates.sprAtachedSizes[a] + atachedSize;
										}
									}

									if (atachedSize + e.target.files[0].size + player.getState().length > 99*1024*1024) {

										tp = tp - 40;
										$('.atached').remove();
										$('.atached-error').remove();
										quizTemplates.sprAtached[ilid] = '';
										quizTemplates.sprAtached[ilid] = 0;
										$('.ic_page').append('<div class="atached-error" style="cursor: pointer; position: absolute; left: 90px; top: '+tp+'px; width: 360px;"><span class="error-msg"><b>Klaida!</b> Prisegtų failų ir turinio bendras dydis negali viršyti 100MB</span></div>');
										e.stopPropagation();
										e.preventDefault();
										this.value = '';
										dynamicHeightCalculator.calculateHeights();
										setTimeout(function() { quizPageLoaded = true; }, 200);
										return false;

									} else {

										ilid = $('.ic_page').attr('id');
										tp = parseInt($('.prideti').css('top'));
										tp = tp + 20;

										if ((quizTemplates.sprAtached[ilid] != undefined) && (quizTemplates.sprAtached[ilid] != '')) {
											quizTemplates.deleteFile(ilid);
										}

										$('.atached-error').remove();
										$('.atached').remove();
										$('.ic_page').append('<div class="atached" style="display: none; cursor: pointer; position: absolute; left: 90px; top: '+tp+'px; width: 394px; font-size: 14px;color: #2b8dd3; background-size: 22px;" onclick="mremoveFile('+"'"+ilid+"'"+')"><span class="fileName">'+e.target.files[0].name+'</span><span class="fileSize"> ( '+toKB(e.target.files[0].size)+' ) </span><span class="fileRemove">Pašalinti</span></div>');
										quizTemplates.sprAtached[ilid] = e.target.files[0].name;
										quizTemplates.sprAtachedSizes[ilid] = e.target.files[0].size;

                                        quizTemplates.mAuthorCheck(false, false);
										$('.prideti').addClass('btn');
										parent.toggleButtonLoading($('.prideti'), true);
										quizTemplates.lockControls();
										dynamicHeightCalculator.calculateHeights();
										setTimeout(function() { quizPageLoaded = true; }, 200);

									}
								} else {
									tp = tp - 40;
									$('.atached').remove();
									$('.atached-error').remove();
									quizTemplates.sprAtached[ilid] = '';
									quizTemplates.sprAtached[ilid] = 0;
									$('.ic_page').append('<div class="atached-error" style="cursor: pointer; position: absolute; left: 90px; top: '+tp+'px; width: 360px;"><span class="error-msg"><b>Klaida!</b> Netinkamas failo tipas. Galimi šie failo tipai: doc, docx, xls, xlsx, ppt, pptx, pdf, jpg, jpeg, png, gif, mp3, flv, mp4, zip. rar, mkv, swf, mov, avi, odt, rtf, txt, wma, wav, mpg, psd, bmp, html, 7Z.</span></div>');
									e.stopPropagation();
									e.preventDefault();
									this.value = '';
									dynamicHeightCalculator.calculateHeights();
									setTimeout(function() { quizPageLoaded = true; }, 200);
									return false;
								}
							});
						$('#file-'+ilid+':not(.processed)').addClass('processed');
					}
				}
			}

			if (typeof(lastW) == "undefined") {
				lastW = 0;
				lastH = -1;
			}

			CheckH = 0;
			EvaluationsPage = 0;
			if ($('.evaluations.evaluations-levels.task-bank').length) {
				CheckH = $('.evaluations.evaluations-levels.task-bank').height();
				EvaluationsPage = 1;
			} else {
				if ($('.ic_page').length) {
					CheckH = $('.ic_page').height();
				} else {
					CheckH = $('.in-iframe-body').height();
				}
				EvaluationsPage = 0;
			}

			if ($('.container .choosen-task-details', window.parent.document).width() >= 600) {
				player.changeLayout('default');
				//console.log('desktop');
			} else {
				player.changeLayout('256F89BF-B785-4E15-B19D-FAB7C58F0376');
				//console.log('mobile');
			}

			if (($('body', window.parent.document).width() != lastW) || (quizPageLoaded)) {
				//if (true == true) {

				quizPageLoaded = false;

				lastW = $('.container .choosen-task-details', window.parent.document).width();
				if (($('.container .choosen-task-details', window.parent.document).width() < 600) && (quizTemplates.dataType != 'json')) {
					scale = $('.container .choosen-task-details', window.parent.document).width() / 360;
				} else {
					scale = $('.container .choosen-task-details', window.parent.document).width() / 1140;
				}

				if ($('body').hasClass('fullscreen')) {
					if (($('.container .choosen-task-details .mauthor-iframe-wrap', window.parent.document).width() < 600) && (quizTemplates.dataType != 'json')) {
						scale = $('.container .choosen-task-details .mauthor-iframe-wrap', window.parent.document).width() / 360;
						exitHeight = 63;//$('.exit-fullscreen-bar').height();
					} else {
						scale = $('.container .choosen-task-details .mauthor-iframe-wrap', window.parent.document).width() / 1140;
						exitHeight = 0;
					}
				}

				if (EvaluationsPage == 1) {scale = 1;}

				ifrm = $('.mauthor-iframe-wrap-inner', window.parent.document).find('#mauthor-iframe');
				if (ifrm.length) {
				} else {
					ifrm = $('.student-content.expanded', window.parent.document).find('.mauthor-iframe');
				}

				if (EvaluationsPage == 1) {
					ifrm.css('transform', '');
				} else {
					ifrm.css('transform', 'scale('+scale+')');
				}

				addifrmHeight = 0;

				if ($('.evaluations.evaluations-levels.task-bank').length) {
					ifrmHeight = $('.evaluations.evaluations-levels.task-bank').height();
				} else {
					//ifrmHeight = $('.ic_page').height() + 77;

					if ($('.ic_page').length) {
						addHeaderHeight = 0;
						if ($('.ic_header').length) { addHeaderHeight = $('.ic_header').height(); }
						ifrmHeight = $('.ic_page').outerHeight() + addHeaderHeight;
						if ($('#st-mainText').length) {
							addifrmHeight = $('#st-mainText').outerHeight() + 50;
						}
					} else {
						ifrmHeight = $('.in-iframe-body').height();
					}

				}

				ifrm.css('transform-origin', 'top left');

				ifrmHeight = Math.max(ifrmHeight, 200);
				if (scale > 1) {
					ifrmHeight2 = (ifrmHeight + addifrmHeight) //* scale;
				} else {
					ifrmHeight2 = (ifrmHeight + addifrmHeight) /// scale;
				}
				ifrmParentHeight = (ifrmHeight+addifrmHeight) * scale;

				if (window.location.href.indexOf('admin') > -1) {
					ifrmParentHeight = ifrmParentHeight + 28;
				}

				lastW = $('.container .choosen-task-details', window.parent.document).width();
				//console.log('lastW', lastW);

				if (!$('body').hasClass('fullscreen')) {

					ifrmWidth = lastW / scale;
					//console.log('setting ifrm with', ifrmWidth, lastW, '/', scale);
					ifrm.css('width', ifrmWidth+'px');

					ifrm.css('height', ifrmHeight2 + 'px');
					ifrm.parent().css('height', ifrmParentHeight + 'px');
					$('#scrollableBody').css('height', ifrmHeight+'px');

				} else {

					console.log('exitHeight', exitHeight);

					if (($('main .wrapper', window.parent.document).width() > 600) && ($('main .wrapper', window.parent.document).width() < 1140)) {
						ifrmWidth = 1140;
					} else {
						if ($('main .wrapper', window.parent.document).width() <= 600) {
							ifrmWidth = 360;
						} else {
							ifrmWidth = lastW_ * scale;
						}
					}

					//console.log('setting ifrm with', ifrmWidth, lastW, '*', scale);
					ifrm.css('width', ifrmWidth+'px');

					ifrm.css('height', (ifrmHeight2+exitHeight) + 'px');
					ifrm.parent().css('height', (ifrmParentHeight+exitHeight) + 'px');
					$('#scrollableBody').css('height', (ifrmHeight2+exitHeight)+'px');
				}

				lastW = $('body', window.parent.document).width();

				if ($('.evaluations.evaluations-levels.task-bank').length) {
					lastH = $('.evaluations.evaluations-levels.task-bank').height();
				} else {
					if ($('.ic_page').length) {
						lastH = $('.ic_page').height();
					} else {
						lastH = $('.in-iframe-body').height();
					}
				}
			}

	}, 500);
}

quizTemplates.printData = function () {

	var ids = new Array();
	$('.doublestate-button-element-selected').each(function (index) {
			 if ($(this).parent().parent().attr('id').indexOf('itm-') > -1) {
				 ids.push($(this).parent().parent().attr('id').replace('itm-', ''));
			 }
		});

	quizTemplates.print(ids);

}

quizTemplates.editData = function () {
	postFunction('redirectToUrl', [quizTemplates.edit]);
}

quizTemplates.reMakePage = function() {

	$('#print').css('display','none');
	$('#edit').css('display','none');

	$('[id*="points-"]').remove();

	k = 0;
	num = 0;
	max = 0;
	if (!$('.ic_page .ic_button_prevpage').length) {

		$('.addon_Advanced_Connector').remove();
		$('.addon_Single_State_Button').remove();

		$('.ic_page').children().each(function () {
				var cl = $(this).attr('class');

				if (cl == 'text_questionlevel') {
					if (num > 0) {
						tp = parseInt($(this).css('top').replace('px', '')) - 30;
						$(this).before('<div class="ic_button_prevpage ic_button_prevpage-up-disabled" style="top:'+tp+'px"></div>');
					}
					num = num + 1;
				}

				if ($(this).is(":visible")) {
					max = Math.max(parseInt($(this).css('top').replace('px', '')) + parseInt($(this).css('height').replace('px', '')) + 30, max);
				}
			});
		$('.ic_page').append('<div class="ic_button_prevpage ic_button_prevpage-up-disabled" style="top:'+max+'px"></div>');
	}



	$('.ic_page').children().each(function( index ) {
			var cl = $(this).attr('class');
			$(this).attr('qwrp', k)
			if (cl == 'ic_button_prevpage ic_button_prevpage-up-disabled') {
				//$('.ic_page').append('<div class="qwrp" id="q'+k+'"></div>');
				//$("[qwrp='"+k+"']").wrapAll($('#q'+k));
				k = k + 1;
			}

		});

	for (i = 0; i<k; i++) {
		$("[qwrp='"+i+"']").wrapAll('<div class="qwrp" id="q'+i+'">');
	}

	offsets = {};
	$('.qwrp').each(function() {
			kk = $(this).attr('id');
			if ($('#'+kk+' .text_questionTitle').length) {
				offset = $('#'+kk+' .text_questionTitle').position().top;
				offsets[kk] = offset;

				height = parseInt($('#'+kk+' .ic_button_prevpage').css('top').replace('px', '')) - offset;
				$(this).css('height', height);
			}


		});

	for (key in offsets) {
		i = key.replace('q', '');
		$("[qwrp='"+i+"']").each(function() {
				tp2 = $(this).position().top - offsets[key];
				lf = $(this).position().left - 90;
				$(this).css('top', tp2+'px');
				$(this).css('left', lf+'px');
			});
	}


	$('body > .box-block').css('display', 'block');
	$('.ic_page').unwrap().unwrap().unwrap().unwrap().unwrap().unwrap().unwrap().unwrap().unwrap();
	$('.ic_page').css('width', '960px');

	$('.MathJax_Preview').remove();
	$('.qwrp script').each(function() {
			tt = $(this).text();
			$(this).replaceWith('\\('+tt+'\\)');
		});


	$('.addon_Double_State_Button').remove();
	$('.ic_button_prevpage').remove();
	$('.ic_button_nextpage').remove();
	$('.text_questionlevel').remove();
	$('.addon_Paragraph').remove();

	MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
	MathJax.Hub.Queue(function () {
		  quizTemplates.printCallback();
		});

	//setTimeout(function() {  }, 500);
}

function mremoveFile(fileId) {
	$('.atached').remove();
	$('#file-'+fileId).val('');
	quizTemplates.sprAtached[fileId] = '';
    quizTemplates.sprAtachedSizes[fileId] = 0;
    quizTemplates.deleteFile(fileId)
}

quizTemplates.getXmlDom = function() {

	if (quizTemplates.mode == 'sprendimas') {
		idd = parseInt($('.navbar-nav li.active').attr('instance-id'));
	}

	if (quizTemplates.mode == 'demonstracija') {
		idd = parseInt($('.navbar-nav li.active').attr('instance-id'));
	}

	if (quizTemplates.mode == 'iliustra') {
		quizTemplates.parseMode();
		idd = quizTemplates.instanceId - 1;
	}

	if (quizTemplates.mode == 'priskyrimas-uzrakinta') {
		quizTemplates.parseMode();
		idd = quizTemplates.instanceId - 1;
	}

	if (quizTemplates.mode == 'priskyrimas') {
		quizTemplates.parseMode();
		idd = quizTemplates.instanceId - 1;
	}

	if (quizTemplates.mode == 'perziura') {
		quizTemplates.parseMode();
		idd = quizTemplates.instanceId - 1;
	}

	while ((idd >= quizTemplates.len) && (quizTemplates.len > 0))  {
		idd = idd - quizTemplates.len;
	}

	node = '';
	k = 0;
	for (i=0;i<quizTemplates.dom.childNodes[0].childNodes.length; i++) {
		if (quizTemplates.dom.childNodes[0].childNodes[i].childNodes.length > 0) {
			if (k == idd) {
				node = quizTemplates.dom.childNodes[0].childNodes[i];
				break;
			}
			k = k + 1;
		}
	}
	return node;

}

quizTemplates.paintAnswers = function(item, paint) {

	if (quizTemplates.mode == 'perziura' || quizTemplates.mode == 'demonstracija') {
		if (paint == 'green') {
			item.addClass('painted-green');
		}
		if (paint == 'white') {
			item.removeClass('painted-green');
			item.removeClass('painted-red');
		}
		if (paint == 'red') {
			item.addClass('painted-red');
		}
	}
}

quizTemplates.convertToNullIfOpenQuiz = function() {

    if ($('.quizDiv .addon_Paragraph').length) {

        quizTemplates._results['percent'] = null;
        quizTemplates._results['percent_easy'] = null;
        quizTemplates._results['percent_medium'] = null;
        quizTemplates._results['percent_hard'] = null;

        quizTemplates._results['points_easy'] = null;
        quizTemplates._results['points_medium'] = null;
        quizTemplates._results['points_hard'] = null;

        for (rid in quizTemplates._results['points']) {
            quizTemplates._results['points'][rid] = null;
        }

    }
}

quizTemplates.setResults = function(id, result, call, dontSave, score, maxScore) {
  if(typeof(call) === 'undefined'){var call = true;}
  if(typeof(dontSave) === 'undefined'){var dontSave = false;}

  gotScore = true;
  if(typeof(score) === 'undefined'){var score = 0; gotScore = false;}
  if(typeof(maxSscore) === 'undefined'){var maxSscore = 0}

	quizTemplates._results[id] = result;

	if (typeof(quizTemplates._results['points']) === 'undefined') {
		quizTemplates._results['points'] = {};
		quizTemplates._results['maxPoints'] = {};

		if (quizTemplates.evalType == 'points') {
			quizTemplates._results['points_easy'] = 0;
			quizTemplates._results['points_medium'] = 0;
			quizTemplates._results['points_hard'] = 0;
		}
	}

	if (gotScore) {
		quizTemplates._results['points'][id] = score;
		//quizTemplates._results['maxPoints'][id] = maxScore; //For bandomieji
		if (quizTemplates.points != undefined) {
			quizTemplates._results['maxPoints'][id] = quizTemplates.points[id];
			if (quizTemplates.points[id] == undefined) {
				quizTemplates._results['maxPoints'][id] = quizTemplates.points[quizTemplates.ids.indexOf(id)];
			}
		}
	}

	if (quizTemplates._results['is_completed'] != true) {
		quizTemplates._results['is_completed'] = false;
	}

	cnt = 0;
	cntDiff = [0, 0, 0, 0];
	positive = 0;
	positiveDiff = [0, 0, 0, 0];
	pointsDiff = [0, 0, 0, 0];

    quizTemplates._results['undone_easy'] = null;
    quizTemplates._results['undone_medium']  = null;
    quizTemplates._results['undone_hard'] = null;

    quizTemplates._results['done_easy'] = null;
    quizTemplates._results['done_medium'] = null;
    quizTemplates._results['done_hard'] = null;

	for (key in quizTemplates._results) {
		if ((key != 'percent') && (key != 'dontClose') && (key != 'percent_easy') && (key != 'percent_medium') && (key != 'percent_hard') && (key != 'is_completed')
			&& (key != 'undone_easy') && (key != 'undone_medium') && (key != 'undone_hard')
			&& (key != 'done_easy') && (key != 'done_medium') && (key != 'done_hard')
			&& (key != 'points_easy') && (key != 'points_medium') && (key != 'points_hard')
			&& (key != 'points') && (key != 'maxPoints') && (key != 'done')
			) {
			cnt = cnt + 1;
			cntDiff[quizTemplates.questionLevels[key]] = cntDiff[quizTemplates.questionLevels[key]] + 1;
			if (quizTemplates._results[key] === true) {
				positive = positive + 1;
				positiveDiff[quizTemplates.questionLevels[key]] = positiveDiff[quizTemplates.questionLevels[key]] + 1;
			}
		}
	}

	doneCnt = [0, 0, 0, 0];
	undoneCnt = [0, 0, 0, 0];


	for (key in quizTemplates.state) {
		if (quizTemplates.state[key].done == 'done') {
			doneCnt[quizTemplates.questionLevels[key]] = doneCnt[quizTemplates.questionLevels[key]] + 1;
		} else {
			undoneCnt[quizTemplates.questionLevels[key]] = undoneCnt[quizTemplates.questionLevels[key]] + 1;
		}
	}

	if (doneCnt[1] > 0) {quizTemplates._results['done_easy'] = doneCnt[1]; quizTemplates._results['undone_easy'] = 0;}
	if (doneCnt[2] > 0) {quizTemplates._results['done_medium'] = doneCnt[2];  quizTemplates._results['undone_medium'] = 0;}
	if (doneCnt[3] > 0) {quizTemplates._results['done_hard'] = doneCnt[3];  quizTemplates._results['undone_hard'] = 0;}
	if (undoneCnt[1] > 0) {quizTemplates._results['undone_easy'] = undoneCnt[1];}
	if (undoneCnt[2] > 0) {quizTemplates._results['undone_medium'] = undoneCnt[2];}
	if (undoneCnt[3] > 0) {quizTemplates._results['undone_hard'] = undoneCnt[3];}

	quizTemplates._results['percent'] = Math.round(positive / cnt * 100);

	if (quizTemplates.dataType != 'mAuthor') {
		quizTemplates._results['dontClose'] = true;
	}

	if (cntDiff[1] > 0) {
		quizTemplates._results['percent_easy'] = Math.round(positiveDiff[1] / cntDiff[1] * 100);
	}

	if (cntDiff[2] > 0) {
		quizTemplates._results['percent_medium'] = Math.round(positiveDiff[2] / cntDiff[2] * 100);
	}

	if (cntDiff[3] > 0) {
		quizTemplates._results['percent_hard'] = Math.round(positiveDiff[3] / cntDiff[3] * 100);
	}


	if (quizTemplates.evalType == 'points') {
		maxPointsCnt = [0, 0, 0, 0];
		pointsDiff = [0, 0, 0, 0];

		//console.log(quizTemplates._results['points']);

		for (key in quizTemplates._results['points']) {
			pointsDiff[quizTemplates.questionLevels[key]] = pointsDiff[quizTemplates.questionLevels[key]] + quizTemplates._results['points'][key];
			maxPointsCnt[quizTemplates.questionLevels[key]] = maxPointsCnt[quizTemplates.questionLevels[key]] + quizTemplates.points[quizTemplates.ids.indexOf(key)];
		}

		if (maxPointsCnt[1] > 0) {quizTemplates._results['points_easy'] = pointsDiff[1];}
		if (maxPointsCnt[2] > 0) {quizTemplates._results['points_medium'] = pointsDiff[2];}
		if (maxPointsCnt[3] > 0) {quizTemplates._results['points_hard'] = pointsDiff[3];}

		quizTemplates._results['percent_easy'] = null;
		quizTemplates._results['percent_medium'] = null;
		quizTemplates._results['percent_hard'] = null;

		if (maxPointsCnt[1] > 0) { quizTemplates._results['percent_easy'] = Math.round(pointsDiff[1] / maxPointsCnt[1] * 100); }
		if (maxPointsCnt[2] > 0) { quizTemplates._results['percent_medium'] = Math.round(pointsDiff[2] / maxPointsCnt[2] * 100); }
		if (maxPointsCnt[3] > 0) { quizTemplates._results['percent_hard'] = Math.round(pointsDiff[3] / maxPointsCnt[3] * 100); }
		if ((maxPointsCnt[1] + maxPointsCnt[2] + maxPointsCnt[3]) > 0) {
			quizTemplates._results['percent'] = Math.round((pointsDiff[1] + pointsDiff[2] + pointsDiff[3]) / (maxPointsCnt[1] + maxPointsCnt[2] + maxPointsCnt[3]) * 100)
		} else {
			quizTemplates._results['percent'] = null;
		}
	}

	try {
		abilitiesPoints = {};
		abilitiesMaxPoints = {};
		for (id in quizTemplates.ids) {
			for (a in quizTemplates.abilities[quizTemplates.ids[id]]) {
				abilityStr = quizTemplates.abilities[quizTemplates.ids[id]][a];
				if (abilitiesPoints[abilityStr] == undefined) {
					abilitiesPoints[abilityStr] = 0;
					abilitiesMaxPoints[abilityStr] = 0;
				}
				abilitiesPoints[abilityStr] = abilitiesPoints[abilityStr] + quizTemplates._results['points'][parseInt(quizTemplates.ids[id])];
				abilitiesMaxPoints[abilityStr] = abilitiesMaxPoints[abilityStr] + quizTemplates._results['maxPoints'][parseInt(quizTemplates.ids[id])];
			}
		}
	} catch (e) {
		//console.log(e);
	}

	quizTemplates._results['abilitiesPoints'] = abilitiesPoints;
	quizTemplates._results['abilitiesMaxPoints'] = abilitiesMaxPoints;

	if (dontSave == false && quizTemplates.mode == 'sprendimas') {
		if (quizTemplates.quizId > -1) {
			localStorage.setItem(quizTemplates.quizId+'-res', 1);
			localStorage.removeItem(quizTemplates.quizId+'-rezults');
			localStorage.setItem(quizTemplates.quizId+'-rezults', JSON.stringify(quizTemplates._results));
		}
	}

	if (call == true && quizTemplates.mode == 'sprendimas') {
		if (quizTemplates.dataType == 'mAuthor') {
			for (id in quizTemplates.ids) {
				delete quizTemplates.state[quizTemplates.ids[id]];
			}
		}

        quizTemplates.convertToNullIfOpenQuiz();

		//console.log(player.getState());
        //console.log(quizTemplates.state);
        quizTemplates.state2 = JSON.parse(player.getState());
        quizTemplates.state2.state = JSON.parse(quizTemplates.state2.state);

        for (key in quizTemplates.state2.state) {
            if (key.indexOf('Text1') > -1) {delete quizTemplates.state2.state[key]}
            if (key.indexOf('Reset1') > -1) {delete quizTemplates.state2.state[key]}
            if (key.indexOf('feedback1') > -1) {delete quizTemplates.state2.state[key]}
            if (key.indexOf('Advanced_Connector1') > -1) {delete quizTemplates.state2.state[key]}
            if (key.indexOf('Done1') > -1) {delete quizTemplates.state2.state[key]}
            if (key.indexOf('Pabaigti') > -1) {delete quizTemplates.state2.state[key]}
            if (key.indexOf('NextPage1') > -1) {delete quizTemplates.state2.state[key]}
            if (key.indexOf('PreviousPage1') > -1) {delete quizTemplates.state2.state[key]}
            if (key.indexOf('Advanced_Connector2') > -1) {delete quizTemplates.state2.state[key]}
            if (key.indexOf('ICPLAYER_PAGE_HEIGHT_MODIFICATIONS') > -1) {delete quizTemplates.state2.state[key]}
            if (key.indexOf('Navigation_Bar') > -1) {delete quizTemplates.state2.state[key]}
            if (key.indexOf('EventCapture1') > -1) {delete quizTemplates.state2.state[key]}
        }

        quizTemplates.backupState = JSON.stringify(quizTemplates.state2.state);
        quizTemplates.state.state = JSON.stringify(quizTemplates.state2.state);
        quizTemplates.state = unnest(quizTemplates.state);

        quizTemplates.state['accessed'] = quizTemplates.accessedPageIDs;

		quizTemplates.requestNumber++;
		quizTemplates.state['requestNumber'] = quizTemplates.requestNumber;
		if (quizTemplates._results != null) {
			if (quizTemplates._results['done'] == true) {
				quizTemplates.resultsCallback(copyArray(quizTemplates._results), quizTemplates.state);
			} else {
				quizTemplates.tempResultsCallback(copyArray(quizTemplates._results), quizTemplates.state, quizTemplates.requestNumber, false, true);
			}
		}
	}
}

function restoreWorkingState(state) {
	state = JSON.parse(state);
	for (k in state) {

        if (   (state[k] == '')
            || (k.indexOf('time') >= 0)
            || (k.indexOf('score') >= 0)
            || (k.indexOf('Text') >= 0)
            || (k.indexOf('Source_list') >= 0)
        ){
            //continue;
        } else {
            state[k] = JSON.stringify(unnest(state[k], 0, k));
        }

        if (state[k].indexOf('gapUniqueId') > 0) {
            state[k] = state[k].replace('{', '{"isDisabled":"false",');
            state[k] = state[k].replace('{', '{"disabled":"[]",');
            state[k] = state[k].replace('"disabled":[],', '');

        }

		if (k.indexOf('multiplegap') > 0) {
			if (state[k].indexOf('placeholders') < 0) {
                state[k] = state[k].replace('{', '{"placeholders":[],');
			}
		}

        if (k.indexOf('Connection') > 0) {
            if (state[k].indexOf('id') < 0) {
                state[k] = state[k].replace('{', '{"id":[],');
            }
        }
	}

    state = JSON.stringify(state);
	return state;
}

quizTemplates.gotoPageId = function(id) {
	id = id + '';
    player.getPlayerServices().getCommands().gotoPageId(id);
}

quizTemplates.compressState = function() {
	quizTemplates.state2 = JSON.parse(player.getState());
	quizTemplates.state2.state = JSON.parse(quizTemplates.state2.state);

	for (key in quizTemplates.state2.state) {
		if (key.indexOf('Text1') > -1) {delete quizTemplates.state2.state[key]}
		if (key.indexOf('Reset1') > -1) {delete quizTemplates.state2.state[key]}
		if (key.indexOf('feedback1') > -1) {delete quizTemplates.state2.state[key]}
		if (key.indexOf('Advanced_Connector1') > -1) {delete quizTemplates.state2.state[key]}
		if (key.indexOf('Done1') > -1) {delete quizTemplates.state2.state[key]}
		if (key.indexOf('Pabaigti') > -1) {delete quizTemplates.state2.state[key]}
		if (key.indexOf('NextPage1') > -1) {delete quizTemplates.state2.state[key]}
		if (key.indexOf('PreviousPage1') > -1) {delete quizTemplates.state2.state[key]}
		if (key.indexOf('Advanced_Connector2') > -1) {delete quizTemplates.state2.state[key]}
		if (key.indexOf('ICPLAYER_PAGE_HEIGHT_MODIFICATIONS') > -1) {delete quizTemplates.state2.state[key]}
		if (key.indexOf('Navigation_Bar') > -1) {delete quizTemplates.state2.state[key]}
		if (key.indexOf('EventCapture1') > -1) {delete quizTemplates.state2.state[key]}
	}

	quizTemplates.state.state = JSON.stringify(quizTemplates.state2.state);
	quizTemplates.state = unnest(quizTemplates.state);
}

quizTemplates.mAuthorCheck = function(done, last=false) {

	if (typeof(done) === 'undefined') {var done = true;}

	player.forceScoreUpdate();

	var ps = player.getPlayerServices();
	var utils = new PlayerUtils(player);
	var presentation = utils.getPresentation();
	var score = utils.getPresentationScore(presentation);

	quizTemplates.state = JSON.parse(player.getState());

	i = 0;
	for (id in quizTemplates.ids) {

		st = JSON.parse(quizTemplates.state.state);

		if (quizTemplates.state[quizTemplates.ids[id]] == undefined) {
			quizTemplates.state[quizTemplates.ids[id]] = {};
		}
		quizTemplates.state[quizTemplates.ids[id]].done = 'undone';
		quizTemplates.questionLevels[quizTemplates.ids[id]] = quizTemplates.levels[i];

		if (st[quizTemplates.ids[id]+'Done1'] != undefined) {
			quizTemplates.state[quizTemplates.ids[id]].done = 'done';
		}

		i = i + 1;
	}

	for (id in quizTemplates.ids) {
		score = utils.scoreService.getPageScoreById(quizTemplates.ids[id]);

		var res = false;
		if ((score.maxScore == score.score) && (parseInt(score.time) > 0) && (score.errorCount == 0)) {
			res = true;
		}

		multiplyer = 1;
		if (hackVals[quizTemplates.ids[id]] > 1) {
			multiplyer = hackVals[quizTemplates.ids[id]];
			//console.log('> 1');
		}

		// reikia bandomiesiams
		//quizTemplates.setResults(quizTemplates.ids[id], res, false, true, (score.score*multiplyer), score.maxScore);
		if (quizTemplates.points != undefined) {
			//console.log(quizTemplates.ids[id], id)
			var ScoreInPoints = quizTemplates.percentToPoints(score.score, score.errorCount, score.maxScore, quizTemplates.points[id]);
			quizTemplates.setResults(quizTemplates.ids[id], res, false, true, ScoreInPoints, quizTemplates.points[id]);
		} else {
			quizTemplates.setResults(quizTemplates.ids[id], res, false, true, 0, 0);
		}
	}

	quizTemplates._results['dontClose'] = true;
	quizTemplates._results['done'] = done;

	if (done == true) {

		var allDone = true;
		for (id in quizTemplates.ids) {
            if (quizTemplates.accessedPageIDs.indexOf(quizTemplates.ids[id]) == -1) {
            	allDone = false;
            }
		}

		if (allDone) {
			quizTemplates._results['is_completed'] = true;
			quizTemplates._results['dontClose'] = false;
			quizTemplates.setResults(quizTemplates.ids[id], res, true, false);
		} else {

            accessedCallbackData = [];
            pageCount = presentation.getPageCount();

            for (num=0;num<pageCount;num++ ){
                //for (id in quizTemplates.ids) {
                page = presentation.getPage(num);
                accessData = {};
                accessData.id = page.getId();
                accessData.position = num;

                if (page.isVisited() == false) {
                    accessData.status = "not_seen";
                } else {
                    if (quizTemplates.accessedPageIDs.indexOf(accessData.id) > -1) {
                        accessData.status = "answer_marked";
                    } else {
                        accessData.status = "no_answer";
                    }
                }

                accessedCallbackData.push(accessData);
            }

			quizTemplates.compressState();

			quizTemplates.sendStatistics(last, quizTemplates.state, quizTemplates._results);

            quizTemplates.convertToNullIfOpenQuiz();
			quizTemplates.popupCallback(accessedCallbackData, quizTemplates._results, quizTemplates.state);
			quizTemplates.markPagesAsUnanswered(quizTemplates.accessedPageIDs);
		}

	} else {
		quizTemplates.compressState();

		quizTemplates.setResults(quizTemplates.ids[id], res, true, true);
		quizTemplates.sendStatistics(last, quizTemplates.state, quizTemplates._results);
	}

	return quizTemplates._results;
}

quizTemplates.hidepopup = function() {
	$('.quizPopWrp').css('display', 'none');
}

quizTemplates.goback = function() {
	//backUrl = window.location.href.split('/')[7];
	//alert(backUrl);
	//'http://beta-klase.eduka.lt/student/my-groups/actions/14410';
	//window.location.href = "/student/my-groups/actions/" + backUrl;

	postFunction('redirectToUrl', [quizTemplates.backUrl]);
}

quizTemplates.printResults = function() {
	console.log('results is', quizTemplates._results);
	console.log('results is', JSON.stringify(quizTemplates._results));
}

quizTemplates.saveRezState = function () {
	if (quizTemplates.quizId > -1) {
		localStorage.setItem(quizTemplates.quizId+'-res', 1);
		localStorage.removeItem(quizTemplates.quizId+'-rezults');
		localStorage.setItem(quizTemplates.quizId+'-rezults', JSON.stringify(quizTemplates._results));
	}
}

quizTemplates.checkDone = function () {
	done = true;
	for (key in quizTemplates.state) {
		if (quizTemplates.state[key]['done'] != 'done') {
			done = false;
		}
	}

	if ((done == true) && (quizTemplates.mode == 'sprendimas')) {
		quizTemplates._results['is_completed'] = true;
	}

	if (done == true) {
		if (quizTemplates.dataType == 'xml') {
			quizTemplates._results['dontClose'] = false;
		} else {
			quizTemplates._results['dontClose'] = true;
		}
		if (quizTemplates.mode == 'sprendimas') {
			if (quizTemplates.mode == 'xml') {
				quizTemplates.resultsCallback(copyArray(quizTemplates._results), quizTemplates.state);
			}
		}
	} else {
		if (quizTemplates.mode == 'sprendimas') {
			if ($('.quizDiv.xml .iseiti').length) {
				setTimeout(function() {$('.quizDiv.xml .iseiti').click();}, 0);
			} else {
				$('.white.error').css('display', 'block');
				$('.white.error .xbutton').html('Tęsti');
			}
		}
	}
}

quizTemplates.len = -1;
quizTemplates.copyData = function() {
	if (quizTemplates.len < 0) {
		quizTemplates.len = quizTemplates.allData.data.length;
	}

	for (j=0;j<quizTemplates.len;j++) {
		quizTemplates.allData.data.push(quizTemplates.allData.data[j]);
	}
}

quizTemplates.updateMokData = function(mokId) {
	var ctrl = '';
	ctrl = $('#mok-'+mokId).val();
	$('#mok-'+mokId).val('');
	$('#mok-'+mokId).trigger('input');
	quizTemplates.instanceId = 0;

	if (quizTemplates.workingState != '') {
		quizTemplates.state = JSON.parse(quizTemplates.workingState);
	}

	if (quizTemplates.atached != '') {
		quizTemplates._atached = JSON.parse(quizTemplates.atached);
	} else {
		quizTemplates._atached = '';
	}

	if (quizTemplates.aggResults != '') {
		quizTemplates._aggResults = JSON.parse(quizTemplates.aggResults);
	} else {
		quizTemplates._aggResults = '';
	}

	if (quizTemplates._aggResults != '') {
		if (quizTemplates._aggResults[mokId] != 'undefined') {
			for (uzdId in quizTemplates._aggResults[mokId]) {
				ctrl = ctrl.replace('no nostatus-'+uzdId, 'status-'+quizTemplates._aggResults[mokId][uzdId]);
				ctrl = ctrl.replace('status-laukiama', 'status-'+quizTemplates._aggResults[mokId][uzdId]);
			}
		}
	}

	$('#mok-'+mokId).val(ctrl);
	$('#mok-'+mokId).trigger('input');
}

quizTemplates.prepareLinks = function(q) {
	var str = q.replace(/\n/g, '')
	           .replace(/\<\<([^\>\>]*)\>\>/gm,
	                     function(x){
							x = x.replace(/\<\</g, '').replace(/\>\>/g, '');
							if (x.indexOf('http') == -1) {
								x = 'http://' + x;
							}
							link = '<a target="_blank" href="'+x+'">'+x+'</a>';
							return link;
						 });
	return str;
}

quizTemplates.LevelChanged = function() {
	$('.lvl1 input').prop('checked', $('#ch1').prop("checked"));
	$('.lvl2 input').prop('checked', $('#ch2').prop("checked"));
	$('.lvl3 input').prop('checked', $('#ch3').prop("checked"));

	if ($('#ch1').prop("checked")) {
		$('.lvl1').parent().css('display', 'block');
	} else {
		$('.lvl1').parent().css('display', 'none');
	}

	if ($('#ch2').prop("checked")) {
		$('.lvl2').parent().css('display', 'block');
	} else {
		$('.lvl2').parent().css('display', 'none');
	}

	if ($('#ch3').prop("checked")) {
		$('.lvl3').parent().css('display', 'block');
	} else {
		$('.lvl3').parent().css('display', 'none');
	}
}

quizTemplates.showAnswers = function() {
	if ($('#answ').prop("checked") == false) {
		$('.task-answers').css('display', 'none');
		$('.task_answered').css('display', 'block');
	} else {
		$('.task-answers').css('display', 'block');
		$('.task_answered').css('display', 'none');
	}
}

quizTemplates.normalize = function() {
	var tp = $('#Pabaigti').position().top + 80;
	$('.ic_page').css('height', tp+'px');

	/*
	$('#Mokytoj').css('display', 'none');
	$('#Komentaras').css('display', 'none');
	$('#Vertinimas').css('display', 'none');
	$('#Balas').css('display', 'none');
	$('#Pabaigti2').css('display', 'none');
	* */
}

quizTemplates.mAuthorEvaluate = function() {

	player.forceScoreUpdate();

	var ps = player.getPlayerServices();
	var utils = new PlayerUtils(player);
	var presentation = utils.getPresentation();
	var score = utils.getPresentationScore(presentation);

	var data = {};
	data['coments'] = {};
	evals = [0, 0, 0, 0];
	counts = [0, 0, 0, 0];
	coms = [0, 0, 0, 0];

	state = (JSON.parse(JSON.parse(player.getState()).state));
	quizTemplates._results['wstate'] = player.getState();

	i = 0;
	for (id in quizTemplates.ids) {
		quizTemplates.questionLevels[quizTemplates.ids[id]] = quizTemplates.levels[i];
		quizTemplates.state[quizTemplates.ids[id]] = {};
		i = i + 1;
	}

	allEvaluated = true;
	for (id in quizTemplates.ids) {

		valId = 'res'+quizTemplates.ids[id];
		if (typeof(state[valId+'Vertinimas']) != 'undefined') {

			if (state[valId+'Vertinimas'].indexOf('points') == -1) {

				vert = JSON.parse(state[valId+'Vertinimas']);
				vertN = JSON.parse(vert.values)[vert.gapUniqueId+'-1'];

				evals[quizTemplates.levels[id]] = evals[quizTemplates.levels[id]] + parseInt(vertN);
				counts[quizTemplates.levels[id]] = counts[quizTemplates.levels[id]] + 1;

				data[quizTemplates.ids[id]] = parseInt(vertN);
				evals[0] = evals[0] + parseInt(vertN);
				counts[0] = counts[0] + 1;

			} else {


				if ($('#'+quizTemplates.ids[id]+'Vertinimas').find('#points').attr('val') == '-') {
					$('#'+quizTemplates.ids[id]+'Vertinimas').addClass('fault');
					allEvaluated = false;
				}

				//ScoreInPoints = quizTemplates.percentToPoints(score.score, score.errorCount, score.maxScore, quizTemplates.points[id]);
				scorePoints = JSON.parse(state[valId+'Vertinimas']);
				quizTemplates.setResults(quizTemplates.ids[id], true, false, true, parseInt(scorePoints.points), quizTemplates.points[id]);

			}

			comment = JSON.parse(state[valId+'Komentaras']).tinymceState
			if (comment != '<p style=\"font-family: Verdana,Arial,Helvetica,sans-serif; font-size: 11px;\"><br data-mce-bogus=\"1\"></p>') {
				data['coments'][valId.replace('res', '')] = comment;
				coms[quizTemplates.levels[id]] = 1;
			}
		}

	}

	if (coms[1] > 0) { data['comment_easy'] = true; }
	else { data['comment_easy'] = false; }

	if (coms[2] > 0) { data['comment_medium'] = true; }
	else { data['comment_medium'] = false; }

	if (coms[3] > 0) { data['comment_hard'] = true; }
	else { data['comment_hard'] = false; }

	quizTemplates._results['comments'] = data['coments'];
	quizTemplates._results['comment'] = data['comment_easy'] || data['comment_medium'] || data['comment_hard'];
	quizTemplates._results['mokinys'] = quizTemplates.mokId;

	data = quizTemplates._results;
	data['teacher_evaluation'] = true;
    data['done'] = true;
    data['is_completed'] = true;
    data['dontClose'] = false;

    if ( data['undone_easy'] != null ) { data['done_easy'] = data['undone_easy']; data['undone_easy'] = null }
    if ( data['undone_medium'] != null ) { data['done_medium'] = data['undone_medium']; data['undone_medium'] = null }
    if ( data['undone_hard'] != null ) { data['done_hard'] = data['undone_hard']; data['undone_hard'] = null }

	//console.log(data);

	if (allEvaluated) {
        parent.toggleButtonLoading($('#Ivertinti'), true)
		quizTemplates.EvaluationsCallback(data);
		return true;
	} else {
		return false;
	}

}

quizTemplates.EvaluationsWasSent = function() {
    parent.toggleButtonLoading($('#Ivertinti'), false)
}

quizTemplates.evaluate = function(mok) {

	var data = {};
	data['coments'] = {};
	evals = [0, 0, 0, 0];
	counts = [0, 0, 0, 0];
	coms = [0, 0, 0, 0];
	$('.mok'+mok).each(function() {
			var valId = $(this).attr('class').replace('mok'+mok+' val', '');
			data[valId] = $('.mok'+mok+'.val'+valId+' input').val();
			data['coments'][valId] = $('.mok'+mok+'.val'+valId+' textarea').val();
			if (data['coments'][valId] != '') {
				coms[quizTemplates.questionLevels[valId]] = 1;
			}
			evals[quizTemplates.questionLevels[valId]] = evals[quizTemplates.questionLevels[valId]] + parseInt($('.mok'+mok+'.val'+valId+' input').val());
			counts[quizTemplates.questionLevels[valId]] = counts[quizTemplates.questionLevels[valId]] + 1;

			evals[0] = evals[0] + parseInt($('.mok'+mok+'.val'+valId+' input').val());
			counts[0] = counts[0] + 1;
		});

	if (counts[1] > 0) {
		data['percent_easy'] = Math.round(evals[1] / counts[1]);
	}

	if (counts[2] > 0) {
		data['percent_medium'] = Math.round(evals[2] / counts[2]);
	}

	if (counts[3] > 0) {
		data['percent_hard'] = Math.round(evals[3] / counts[3]);
	}

	data['percent'] = Math.round(evals[0] / counts[0]);

	if (coms[1] > 0) { data['comment_easy'] = true; }
	else { data['comment_easy'] = false; }

	if (coms[2] > 0) { data['comment_medium'] = true; }
	else { data['comment_medium'] = false; }

	if (coms[3] > 0) { data['comment_hard'] = true; }
	else { data['comment_hard'] = false; }

	data['comment'] = data['comment_easy'] || data['comment_medium'] || data['comment_hard'];

	data['mokinys'] = mok;

	quizTemplates.EvaluationsCallback(data);

}

quizTemplates.showResultData = function() {

	//console.log('ShowResultData');

	try {
        if (quizTemplates.results != '') {
            var res = JSON.parse(quizTemplates.results);
            for (mokinys in quizTemplates.attachment) {
                var prisegti = quizTemplates.attachment[mokinys];
            }
            var prisegti = quizTemplates.attachment[mokinys];

        } else {
            var res = JSON.parse(quizTemplates.aggResults)[quizTemplates.divId];
            var prisegti = quizTemplates.attachment[quizTemplates.divId];
        }
    } catch(e) {
		console.log(e);
	}


	for (fileId in prisegti) {
		//console.log(fileId);
		for (file in prisegti[fileId]) {
			atop = $('#'+fileId+'Paragraph1').css('top');
			$('.ic_page').append('<div style="top: '+atop+'" class="atached" onclick=" window.parent.open('+"'"+prisegti[fileId][file][0]['url']+"', '_blank'"+');"><a href="'+prisegti[fileId][file][0]['url']+'">'+prisegti[fileId][file][0]['FileName']+'</a></div>');
		}
	}

	for (id in quizTemplates.ids) {
		var qid = quizTemplates.ids[id];
		//console.log('cheking...', qid, res[parseInt(qid)], res[qid], parseInt(res[qid]), res);
		$('#status-true-'+qid).css('display', 'none');
		if ((res[parseInt(qid)] == true) || (res[parseInt(qid)] == 'true') || (res[qid] == 'true') || (res[qid] == true)){
			$('#status-true-'+qid).css('display', 'block');
			$('#status-false-'+qid).css('display', 'none');
		} else {
			if (parseInt(res[qid]) > 0) {
				$('#status-true-'+qid).css('display', 'block');
				$('#status-false-'+qid).css('display', 'none');
			} else {
				$('#status-false-'+qid).css('display', 'block');
			}
		}

		//$('#status-true-'+qid+' img').attr('src', '/quiz/resources/status-true.png');
		//$('#status-false-'+qid+' img').attr('src', '/quiz/resources/status-false.png');

		$('#itm-'+qid).css('display', 'none');
	}

	var ps = player.getPlayerServices();
	var utils = new PlayerUtils(player);
	var presentation = utils.getPresentation();
	var score = utils.getPresentationScore(presentation);

	if ((quizTemplates.openEvaluation == true) && ($('.addon_Paragraph').length))	{
		$('#Pabaigti').removeClass('addon_Single_State_Button');
		ivertintiButton = $('.ic_text.amokytoj').last();
		//ivertintiButton.css('visibility', 'visible');

		tp = ivertintiButton.position().top + 107;
		//ivertintiButton.css('top', tp + 'px');
		//setTimeout( function() {ivertintiButton.bind('click', function() { quizTemplates.mAuthorEvaluate(); }); }, 0);

        $('.ic_page').append('<div class="btn btn--custom-primary btn--padding-less" style="cursor: pointer; right:90px; color: #2B8DD4;	font-family: Roboto; font-size: 14px; letter-spacing: 0.22px; line-height: 19px; text-align: center; height: 19px; width: 125px; border: 1px solid #2B8DD4; border-radius: 4px; top: '+tp+'px; padding: 9px 23px; 8px 24px; position: absolute;" id="Ivertinti">Siųsti vertinimą</div>')
        $('#Ivertinti').bind('click', function() {
				$('#ivertintiFeedback').remove();
				if (quizTemplates.mAuthorEvaluate()) {
					$('.ic_page').append('<div class="addon_Single_State_Button" style="text-align: right; visibility: visible; height: 15px; width: 232px; color: #0A9200; font-family: Roboto; font-size: 14px; line-height: 15px; position: absolute; right: 90px; bottom: 20px;" id="ivertintiFeedback">Įvertinimas buvo nusiųstas mokiniui</div>');
				} else {
					$('.ic_page').append('<div class="addon_Single_State_Button" style="text-align: right; visibility: visible; height: 15px; width: 203px; color: #ED2028; font-family: Roboto; font-size: 14px; line-height: 15px; position: absolute; right: 90px; bottom: 20px;" id="ivertintiFeedback">Privalote įvertinti visas užduotis</div>');
				}
			});

		if ((quizTemplates.evaluationEnabled == false) || (quizTemplates.workingState == '[]')) {
        	$('.amokytoj #points').css('pointer-events', 'none');
			$('.addon_Paragraph.amokytoj').css('pointer-events', 'none');
			$('#Ivertinti').css('pointer-events', 'none');
		}

	} else {

		quizTemplates.hackSelectHtmlEntities('res');

	   utils.playerServices.getCommands().checkAnswers();
		$('.text_questionTitle .ic_gap').addClass('ic_gap-correct');
		$('.text_questionTitle .ic_gap').removeClass('ic_gap-wrong');

		//console.log('answers checked');

        //MathJax.Hub.Queue(["Typeset",MathJax.Hub]);

		setTimeout(function() {
			utils.playerServices.getCommands().checkAnswers();
			$('.text_questionTitle .ic_gap').addClass('ic_gap-correct');
			$('.text_questionTitle .ic_gap').removeClass('ic_gap-wrong');

            //MathJax.Hub.Queue(["Typeset",MathJax.Hub]);
		}, 1000);

		ii = setInterval(function () {
				$('.text_questionTitle .ic_gap').addClass('ic_gap-correct');
				$('.text_questionTitle .ic_gap').removeClass('ic_gap-wrong');

				if ($('#16515Table1').length) {
					utils.playerServices.getCommands().checkAnswers();
				} else {
					clearInterval(ii);
				}

				if ( ($('.MathJax .mathGap.ic_gap-correct').length) || ($('.MathJax .mathGap.ic_gap-wrong').length) ) {

					itm = $('#16515Table1-1');
					if (itm.val() == '1') {
						itm.addClass('ic_gap-correct');
					} else {
						itm.addClass('ic_gap-wrong');
					}

					itm = $('#16515Table1-2');
					if (itm.val() == '9') {
						itm.addClass('ic_gap-correct');
					} else {
						itm.addClass('ic_gap-wrong');
					}

					itm = $('#16515Table1-3');
					if (itm.val() == '4') {
						itm.addClass('ic_gap-correct');
					} else {
						itm.addClass('ic_gap-wrong');
					}

					itm = $('#16515Table1-4');
					if (itm.val() == '9') {
						itm.addClass('ic_gap-correct');
					} else {
						itm.addClass('ic_gap-wrong');
					}

					itm = $('#16515Table1-5');
					if (itm.val() == '4') {
						itm.addClass('ic_gap-correct');
					} else {
						itm.addClass('ic_gap-wrong');
					}

					itm = $('#16515Table1-6');
					if (itm.val() == '27') {
						itm.addClass('ic_gap-correct');
					} else {
						itm.addClass('ic_gap-wrong');
					}

					itm = $('#16515Table1-7');
					if (itm.val() == '8') {
						itm.addClass('ic_gap-correct');
					} else {
						itm.addClass('ic_gap-wrong');
					}

					itm = $('#16515Table1-8');
					if (itm.val() == '27') {
						itm.addClass('ic_gap-correct');
					} else {
						itm.addClass('ic_gap-wrong');
					}

					itm = $('#16515Table1-9');
					if (itm.val() == '44') {
						itm.addClass('ic_gap-correct');
					} else {
						itm.addClass('ic_gap-wrong');
					}

					itm = $('#16515Table1-10');
					if (itm.val() == '27') {
						itm.addClass('ic_gap-correct');
					} else {
						itm.addClass('ic_gap-wrong');
					}

					clearInterval(ii);
				}
			}, 500);

	}

};

quizTemplates.togleStates = {};
quizTemplates.togleStates['lengva'] = 1;
quizTemplates.togleStates['vidutinė'] = 1;
quizTemplates.togleStates['sunki'] = 1;
quizTemplates.togle = function (level, type) {
	if (typeof(type) == 'undefined') {
		type = quizTemplates.togleStates[level];
	}

	$('.ic_page').children().each(function() {
			tp = $(this).css('top');
			if ($(this).attr('tp') == undefined) {
				$(this).attr('tp', tp);
			}
		});

	var utils = new PlayerUtils(player);

	$('.addon_Double_State_Button').each(function(){
			id = $(this).attr('id');
			if (id.indexOf('itm-') > -1) {
				id = id.replace('itm-', '');
				html = $('#'+id+'-level').html();
				if (html.indexOf(level) > -1) {
					if (type == 1) {
						utils.playerServices.getModule('itm-'+id).deselect();
						$('#'+id+'-level').attr('show', 'false');
					} else {
						utils.playerServices.getModule('itm-'+id).select();
						$('#'+id+'-level').attr('show', 'true');
					}
				}
			}
		});

	hide = false;
	delta = 0;
	last_v = true;
	last_h = undefined;
	lastPrevTop = 110;
	$('.ic_page').children().each(function(index) {
			if ($(this).hasClass('text_questionlevel')) {

				if (last_v == false) {
					delta = delta + parseInt($(this).attr('tp').replace('px', '')) - parseInt(last_h.attr('tp').replace('px', ''));
				}
				last_h = $(this);

				if ($(this).attr('show') == 'false') {
					hide = true;
					last_v = false;
				} else {
					hide = false;
					last_v = true;
				}
			}

			tp = parseInt($(this).attr('tp').replace('px', '')) - delta;
			if (hide == true) {
				$(this).css('visibility', 'hidden');
				$(this).css('top', '-5000px')
			} else {
				$(this).css('visibility', 'visible');
				$(this).css('top', tp+'px');

				lastPrevTop2 = parseInt($(this).css('top').replace('px', '')) + parseInt($(this).css('height').replace('px', ''));
				if (lastPrevTop2 > lastPrevTop) {
					lastPrevTop = lastPrevTop2;
				}
			}


		});

	ich = lastPrevTop + 50;
	$('.ic_page').css('height', ich+'px');

	if (quizTemplates.togleStates[level] == 1) {
		quizTemplates.togleStates[level] = 0;
	} else {
		quizTemplates.togleStates[level] = 1;
	}
}

quizTemplates.pointsLitteral = function(points) {

	if (points == 1) {
		return 'taškas';
	}
	if (points < 10) {
		return 'taškai';
	}

	if ((points % 10 == 1) && (points > 20)) {
		return 'taškas';
	} else {
		if ((points < 20) || (points % 10 == 0)) {
			return 'taškų';
		} else {
			return 'taškai'
		}
	}
}

// Warn if overriding existing method
if(Array.prototype.equals)
    console.warn("Overriding existing Array.prototype.equals. Possible causes: New API defines the method, there's a framework conflict or you've got double inclusions in your code.");
// attach the .equals method to Array's prototype to call it on any array
Array.prototype.equals = function (array) {
    // if the other array is a falsy value, return
    if (!array)
        return false;

    // compare lengths - can save a lot of time
    if (this.length != array.length)
        return false;

    for (var i = 0, l=this.length; i < l; i++) {
        // Check if we have nested arrays
        if (this[i] instanceof Array && array[i] instanceof Array) {
            // recurse into the nested arrays
            if (!this[i].equals(array[i]))
                return false;
        }
        else if (this[i] != array[i]) {
            // Warning - two different object instances will never be equal: {x:20} != {x:20}
            return false;
        }
    }
    return true;
}
// Hide method from for-in loops
Object.defineProperty(Array.prototype, "equals", {enumerable: false});
let quizHackText ='';

let hackVals = {};
hackVals['15602'] = 2;
hackVals['15606'] = 2;
hackVals['15608'] = 2;
hackVals['15404'] = 2;
hackVals['15411'] = 2;
hackVals['16387'] = 4;
hackVals['16388'] = 3;
hackVals['16410'] = 2;
hackVals['16406'] = 2;

quizTemplates.scaleView = function () {

	let CheckH_ = 0;
	let EvaluationsPage = 0;
	if ($('.evaluations.evaluations-levels.task-bank').length) {
		CheckH_ = $('.evaluations.evaluations-levels.task-bank').height();
		EvaluationsPage = 1;
	} else {
		CheckH_ = $('.ic_page').height();
		EvaluationsPage = 0;
	}

	let lastW_ = $('.container .choosen-task-details', window.parent.document).width();

	let scale;
	if (($('main .wrapper', window.parent.document).width() < 600) && (quizTemplates.dataType != 'json')) {
		scale = $('.container .choosen-task-details', window.parent.document).width() / 360;
	} else {
		scale = $('.container .choosen-task-details', window.parent.document).width() / 1140;
	}

	if ($('body').hasClass('fullscreen')) {
		if ($('main .wrapper', window.parent.document).width() < 600) {
            scale = $('.container .choosen-task-details .mauthor-iframe-wrap', window.parent.document).width() / 360;
        } else {
            scale = $('.container .choosen-task-details .mauthor-iframe-wrap', window.parent.document).width() / 1140;
        }
	}

	if (EvaluationsPage == 1) {scale = 1;}

	let ifrm = $('.mauthor-iframe-wrap-inner', window.parent.document).find('#mauthor-iframe');
	if (ifrm.length) {
	} else {
		ifrm = $('.student-content.expanded', window.parent.document).find('.mauthor-iframe');
	}

	if (EvaluationsPage == 1) {
		ifrm.css('transform', '');
	} else {
		ifrm.css('transform', 'scale('+scale+')');
	}

    let addifrmHeight = 0;
	let ifrmHeight;
	if ($('.evaluations.evaluations-levels.task-bank').length) {
		ifrmHeight = $('.evaluations.evaluations-levels.task-bank').height();
	} else {
		if ($('.ic_page').length) {
			let addHeaderHeight = 0;
			if ($('.ic_header').length) { addHeaderHeight = $('.ic_header').height(); }
			 ifrmHeight = $('.ic_page').outerHeight() + addHeaderHeight;
			//console.log('ifrmHeight', ifrmHeight);
			if ($('#st-mainText').length) {
				addifrmHeight = $('#st-mainText').outerHeight() + 50;
                //console.log('addifrmHeight...', addifrmHeight);
			}
		} else {
			ifrmHeight = $('.in-iframe-body').height();
		}
	}

	ifrmHeight = Math.max(ifrmHeight, 200);

	let ifrmHeight2 = (ifrmHeight + addifrmHeight) /** scale*/ + 10;
	let ifrmWidth;
    if (!$('body').hasClass('fullscreen')) {

        ifrmWidth = lastW_ / scale;
        //console.log('2 setting ifrm with', ifrmWidth);
        ifrm.css('width', ifrmWidth+'px');

        ifrm.css('height', ifrmHeight + 'px');
        ifrm.parent().css('height', ifrmHeight2 + 'px');
        $('#scrollableBody').css('height', ifrmHeight+'px');
    } else {

        if (($('main .wrapper', window.parent.document).width() > 600) && ($('main .wrapper', window.parent.document).width() < 1140)) {
            ifrmWidth = 1140;
        } else {
            ifrmWidth = lastW_ * scale;
            //console.log('multiplying by scale');
		}
        //console.log('2 setting ifrm with', ifrmWidth, 'with scale of', scale, 'of origin with', lastW_);
        ifrm.css('width', ifrmWidth+'px');

        ifrm.css('height', ifrmHeight2 + 'px');
        ifrm.parent().css('height', ifrmHeight2 + 'px');
        $('#scrollableBody').css('height', ifrmHeight2+'px');
	}

	ifrm.css('transform-origin', 'top left');

	$('.mauthor-iframe-wrap', window.parent.document).css('overflow', 'hidden');
	$('.mauthor-iframe-wrap-inner', window.parent.document).css('overflow', 'hidden');

}

quizTemplates.scaleView();

quizTemplates.checkFullScreen = function () {
	let inFullScreen = false;
	setInterval(function() {
		if ($('body').hasClass('fullscreen') && !inFullScreen) { console.log('rescaling to fullscreen');  quizTemplates.scaleView(); inFullScreen = true }
        if (!$('body').hasClass('fullscreen') && inFullScreen) { console.log('rescaling from fullscreen'); quizTemplates.scaleView(); inFullScreen = false }
	}, 1);
}